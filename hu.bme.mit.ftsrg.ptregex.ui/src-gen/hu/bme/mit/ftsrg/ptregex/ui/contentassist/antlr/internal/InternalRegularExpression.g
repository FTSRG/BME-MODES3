/*
 * generated by Xtext
 */
grammar InternalRegularExpression;

options {
	superClass=AbstractInternalContentAssistParser;
	
}

@lexer::header {
package hu.bme.mit.ftsrg.ptregex.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package hu.bme.mit.ftsrg.ptregex.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import hu.bme.mit.ftsrg.ptregex.services.RegularExpressionGrammarAccess;

}

@parser::members {
 
 	private RegularExpressionGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(RegularExpressionGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleRegexModel
entryRuleRegexModel 
:
{ before(grammarAccess.getRegexModelRule()); }
	 ruleRegexModel
{ after(grammarAccess.getRegexModelRule()); } 
	 EOF 
;

// Rule RegexModel
ruleRegexModel
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getRegexModelAccess().getGroup()); }
(rule__RegexModel__Group__0)
{ after(grammarAccess.getRegexModelAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAlphabet
entryRuleAlphabet 
:
{ before(grammarAccess.getAlphabetRule()); }
	 ruleAlphabet
{ after(grammarAccess.getAlphabetRule()); } 
	 EOF 
;

// Rule Alphabet
ruleAlphabet
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAlphabetAccess().getGroup()); }
(rule__Alphabet__Group__0)
{ after(grammarAccess.getAlphabetAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleFunctor
entryRuleFunctor 
:
{ before(grammarAccess.getFunctorRule()); }
	 ruleFunctor
{ after(grammarAccess.getFunctorRule()); } 
	 EOF 
;

// Rule Functor
ruleFunctor
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getFunctorAccess().getGroup()); }
(rule__Functor__Group__0)
{ after(grammarAccess.getFunctorAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleExpressionDeclaration
entryRuleExpressionDeclaration 
:
{ before(grammarAccess.getExpressionDeclarationRule()); }
	 ruleExpressionDeclaration
{ after(grammarAccess.getExpressionDeclarationRule()); } 
	 EOF 
;

// Rule ExpressionDeclaration
ruleExpressionDeclaration
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getExpressionDeclarationAccess().getGroup()); }
(rule__ExpressionDeclaration__Group__0)
{ after(grammarAccess.getExpressionDeclarationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleExpression
entryRuleExpression 
:
{ before(grammarAccess.getExpressionRule()); }
	 ruleExpression
{ after(grammarAccess.getExpressionRule()); } 
	 EOF 
;

// Rule Expression
ruleExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getExpressionAccess().getChoiceParserRuleCall()); }
	ruleChoice
{ after(grammarAccess.getExpressionAccess().getChoiceParserRuleCall()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleChoice
entryRuleChoice 
:
{ before(grammarAccess.getChoiceRule()); }
	 ruleChoice
{ after(grammarAccess.getChoiceRule()); } 
	 EOF 
;

// Rule Choice
ruleChoice
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getChoiceAccess().getGroup()); }
(rule__Choice__Group__0)
{ after(grammarAccess.getChoiceAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSequence
entryRuleSequence 
:
{ before(grammarAccess.getSequenceRule()); }
	 ruleSequence
{ after(grammarAccess.getSequenceRule()); } 
	 EOF 
;

// Rule Sequence
ruleSequence
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSequenceAccess().getGroup()); }
(rule__Sequence__Group__0)
{ after(grammarAccess.getSequenceAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleMultExpression
entryRuleMultExpression 
:
{ before(grammarAccess.getMultExpressionRule()); }
	 ruleMultExpression
{ after(grammarAccess.getMultExpressionRule()); } 
	 EOF 
;

// Rule MultExpression
ruleMultExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getMultExpressionAccess().getGroup()); }
(rule__MultExpression__Group__0)
{ after(grammarAccess.getMultExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleParenExpression
entryRuleParenExpression 
:
{ before(grammarAccess.getParenExpressionRule()); }
	 ruleParenExpression
{ after(grammarAccess.getParenExpressionRule()); } 
	 EOF 
;

// Rule ParenExpression
ruleParenExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getParenExpressionAccess().getAlternatives()); }
(rule__ParenExpression__Alternatives)
{ after(grammarAccess.getParenExpressionAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAny
entryRuleAny 
:
{ before(grammarAccess.getAnyRule()); }
	 ruleAny
{ after(grammarAccess.getAnyRule()); } 
	 EOF 
;

// Rule Any
ruleAny
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAnyAccess().getGroup()); }
(rule__Any__Group__0)
{ after(grammarAccess.getAnyAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleInverse
entryRuleInverse 
:
{ before(grammarAccess.getInverseRule()); }
	 ruleInverse
{ after(grammarAccess.getInverseRule()); } 
	 EOF 
;

// Rule Inverse
ruleInverse
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getInverseAccess().getGroup()); }
(rule__Inverse__Group__0)
{ after(grammarAccess.getInverseAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleTimedExpression
entryRuleTimedExpression 
:
{ before(grammarAccess.getTimedExpressionRule()); }
	 ruleTimedExpression
{ after(grammarAccess.getTimedExpressionRule()); } 
	 EOF 
;

// Rule TimedExpression
ruleTimedExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTimedExpressionAccess().getGroup()); }
(rule__TimedExpression__Group__0)
{ after(grammarAccess.getTimedExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleEvent
entryRuleEvent 
:
{ before(grammarAccess.getEventRule()); }
	 ruleEvent
{ after(grammarAccess.getEventRule()); } 
	 EOF 
;

// Rule Event
ruleEvent
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getEventAccess().getGroup()); }
(rule__Event__Group__0)
{ after(grammarAccess.getEventAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleParameter
entryRuleParameter 
:
{ before(grammarAccess.getParameterRule()); }
	 ruleParameter
{ after(grammarAccess.getParameterRule()); } 
	 EOF 
;

// Rule Parameter
ruleParameter
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getParameterAccess().getAlternatives()); }
(rule__Parameter__Alternatives)
{ after(grammarAccess.getParameterAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleFixParameter
entryRuleFixParameter 
:
{ before(grammarAccess.getFixParameterRule()); }
	 ruleFixParameter
{ after(grammarAccess.getFixParameterRule()); } 
	 EOF 
;

// Rule FixParameter
ruleFixParameter
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getFixParameterAccess().getAlternatives()); }
(rule__FixParameter__Alternatives)
{ after(grammarAccess.getFixParameterAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleFixIntParameter
entryRuleFixIntParameter 
:
{ before(grammarAccess.getFixIntParameterRule()); }
	 ruleFixIntParameter
{ after(grammarAccess.getFixIntParameterRule()); } 
	 EOF 
;

// Rule FixIntParameter
ruleFixIntParameter
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getFixIntParameterAccess().getBodyAssignment()); }
(rule__FixIntParameter__BodyAssignment)
{ after(grammarAccess.getFixIntParameterAccess().getBodyAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleFixStringParameter
entryRuleFixStringParameter 
:
{ before(grammarAccess.getFixStringParameterRule()); }
	 ruleFixStringParameter
{ after(grammarAccess.getFixStringParameterRule()); } 
	 EOF 
;

// Rule FixStringParameter
ruleFixStringParameter
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getFixStringParameterAccess().getBodyAssignment()); }
(rule__FixStringParameter__BodyAssignment)
{ after(grammarAccess.getFixStringParameterAccess().getBodyAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleVarParameter
entryRuleVarParameter 
:
{ before(grammarAccess.getVarParameterRule()); }
	 ruleVarParameter
{ after(grammarAccess.getVarParameterRule()); } 
	 EOF 
;

// Rule VarParameter
ruleVarParameter
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getVarParameterAccess().getVarAssignment()); }
(rule__VarParameter__VarAssignment)
{ after(grammarAccess.getVarParameterAccess().getVarAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSingletonParameter
entryRuleSingletonParameter 
:
{ before(grammarAccess.getSingletonParameterRule()); }
	 ruleSingletonParameter
{ after(grammarAccess.getSingletonParameterRule()); } 
	 EOF 
;

// Rule SingletonParameter
ruleSingletonParameter
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSingletonParameterAccess().getGroup()); }
(rule__SingletonParameter__Group__0)
{ after(grammarAccess.getSingletonParameterAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleVar
entryRuleVar 
:
{ before(grammarAccess.getVarRule()); }
	 ruleVar
{ after(grammarAccess.getVarRule()); } 
	 EOF 
;

// Rule Var
ruleVar
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getVarAccess().getNameAssignment()); }
(rule__Var__NameAssignment)
{ after(grammarAccess.getVarAccess().getNameAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}




rule__MultExpression__Alternatives_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultExpressionAccess().getGroup_1_0()); }
(rule__MultExpression__Group_1_0__0)
{ after(grammarAccess.getMultExpressionAccess().getGroup_1_0()); }
)

    |(
{ before(grammarAccess.getMultExpressionAccess().getGroup_1_1()); }
(rule__MultExpression__Group_1_1__0)
{ after(grammarAccess.getMultExpressionAccess().getGroup_1_1()); }
)

    |(
{ before(grammarAccess.getMultExpressionAccess().getGroup_1_2()); }
(rule__MultExpression__Group_1_2__0)
{ after(grammarAccess.getMultExpressionAccess().getGroup_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ParenExpression__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParenExpressionAccess().getGroup_0()); }
(rule__ParenExpression__Group_0__0)
{ after(grammarAccess.getParenExpressionAccess().getGroup_0()); }
)

    |(
{ before(grammarAccess.getParenExpressionAccess().getAnyParserRuleCall_1()); }
	ruleAny
{ after(grammarAccess.getParenExpressionAccess().getAnyParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getParenExpressionAccess().getInverseParserRuleCall_2()); }
	ruleInverse
{ after(grammarAccess.getParenExpressionAccess().getInverseParserRuleCall_2()); }
)

    |(
{ before(grammarAccess.getParenExpressionAccess().getTimedExpressionParserRuleCall_3()); }
	ruleTimedExpression
{ after(grammarAccess.getParenExpressionAccess().getTimedExpressionParserRuleCall_3()); }
)

    |(
{ before(grammarAccess.getParenExpressionAccess().getEventParserRuleCall_4()); }
	ruleEvent
{ after(grammarAccess.getParenExpressionAccess().getEventParserRuleCall_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Parameter__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterAccess().getVarParameterParserRuleCall_0()); }
	ruleVarParameter
{ after(grammarAccess.getParameterAccess().getVarParameterParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getParameterAccess().getSingletonParameterParserRuleCall_1()); }
	ruleSingletonParameter
{ after(grammarAccess.getParameterAccess().getSingletonParameterParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getParameterAccess().getFixParameterParserRuleCall_2()); }
	ruleFixParameter
{ after(grammarAccess.getParameterAccess().getFixParameterParserRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FixParameter__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFixParameterAccess().getFixIntParameterParserRuleCall_0()); }
	ruleFixIntParameter
{ after(grammarAccess.getFixParameterAccess().getFixIntParameterParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getFixParameterAccess().getFixStringParameterParserRuleCall_1()); }
	ruleFixStringParameter
{ after(grammarAccess.getFixParameterAccess().getFixStringParameterParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__RegexModel__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RegexModel__Group__0__Impl
	rule__RegexModel__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RegexModel__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRegexModelAccess().getAlphabetAssignment_0()); }
(rule__RegexModel__AlphabetAssignment_0)?
{ after(grammarAccess.getRegexModelAccess().getAlphabetAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RegexModel__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RegexModel__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RegexModel__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRegexModelAccess().getDeclarationsAssignment_1()); }
(rule__RegexModel__DeclarationsAssignment_1)*
{ after(grammarAccess.getRegexModelAccess().getDeclarationsAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Alphabet__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Alphabet__Group__0__Impl
	rule__Alphabet__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Alphabet__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAlphabetAccess().getAlphabetAction_0()); }
(

)
{ after(grammarAccess.getAlphabetAccess().getAlphabetAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Alphabet__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Alphabet__Group__1__Impl
	rule__Alphabet__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Alphabet__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAlphabetAccess().getAlphabetKeyword_1()); }

	'alphabet' 

{ after(grammarAccess.getAlphabetAccess().getAlphabetKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Alphabet__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Alphabet__Group__2__Impl
	rule__Alphabet__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Alphabet__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAlphabetAccess().getEqualsSignKeyword_2()); }

	'=' 

{ after(grammarAccess.getAlphabetAccess().getEqualsSignKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Alphabet__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Alphabet__Group__3__Impl
	rule__Alphabet__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Alphabet__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAlphabetAccess().getLeftCurlyBracketKeyword_3()); }

	'{' 

{ after(grammarAccess.getAlphabetAccess().getLeftCurlyBracketKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Alphabet__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Alphabet__Group__4__Impl
	rule__Alphabet__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Alphabet__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAlphabetAccess().getGroup_4()); }
(rule__Alphabet__Group_4__0)?
{ after(grammarAccess.getAlphabetAccess().getGroup_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Alphabet__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Alphabet__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Alphabet__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAlphabetAccess().getRightCurlyBracketKeyword_5()); }

	'}' 

{ after(grammarAccess.getAlphabetAccess().getRightCurlyBracketKeyword_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}














rule__Alphabet__Group_4__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Alphabet__Group_4__0__Impl
	rule__Alphabet__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Alphabet__Group_4__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAlphabetAccess().getFunctorsAssignment_4_0()); }
(rule__Alphabet__FunctorsAssignment_4_0)
{ after(grammarAccess.getAlphabetAccess().getFunctorsAssignment_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Alphabet__Group_4__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Alphabet__Group_4__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Alphabet__Group_4__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAlphabetAccess().getGroup_4_1()); }
(rule__Alphabet__Group_4_1__0)*
{ after(grammarAccess.getAlphabetAccess().getGroup_4_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Alphabet__Group_4_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Alphabet__Group_4_1__0__Impl
	rule__Alphabet__Group_4_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Alphabet__Group_4_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAlphabetAccess().getCommaKeyword_4_1_0()); }

	',' 

{ after(grammarAccess.getAlphabetAccess().getCommaKeyword_4_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Alphabet__Group_4_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Alphabet__Group_4_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Alphabet__Group_4_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAlphabetAccess().getFunctorsAssignment_4_1_1()); }
(rule__Alphabet__FunctorsAssignment_4_1_1)
{ after(grammarAccess.getAlphabetAccess().getFunctorsAssignment_4_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Functor__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Functor__Group__0__Impl
	rule__Functor__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Functor__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctorAccess().getNameAssignment_0()); }
(rule__Functor__NameAssignment_0)
{ after(grammarAccess.getFunctorAccess().getNameAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Functor__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Functor__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Functor__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctorAccess().getGroup_1()); }
(rule__Functor__Group_1__0)?
{ after(grammarAccess.getFunctorAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Functor__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Functor__Group_1__0__Impl
	rule__Functor__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Functor__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctorAccess().getSolidusKeyword_1_0()); }

	'/' 

{ after(grammarAccess.getFunctorAccess().getSolidusKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Functor__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Functor__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Functor__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctorAccess().getArityAssignment_1_1()); }
(rule__Functor__ArityAssignment_1_1)
{ after(grammarAccess.getFunctorAccess().getArityAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ExpressionDeclaration__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExpressionDeclaration__Group__0__Impl
	rule__ExpressionDeclaration__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionDeclaration__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionDeclarationAccess().getExpressionKeyword_0()); }

	'expression' 

{ after(grammarAccess.getExpressionDeclarationAccess().getExpressionKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ExpressionDeclaration__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExpressionDeclaration__Group__1__Impl
	rule__ExpressionDeclaration__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionDeclaration__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionDeclarationAccess().getNameAssignment_1()); }
(rule__ExpressionDeclaration__NameAssignment_1)
{ after(grammarAccess.getExpressionDeclarationAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ExpressionDeclaration__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExpressionDeclaration__Group__2__Impl
	rule__ExpressionDeclaration__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionDeclaration__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionDeclarationAccess().getGroup_2()); }
(rule__ExpressionDeclaration__Group_2__0)?
{ after(grammarAccess.getExpressionDeclarationAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ExpressionDeclaration__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExpressionDeclaration__Group__3__Impl
	rule__ExpressionDeclaration__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionDeclaration__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionDeclarationAccess().getEqualsSignKeyword_3()); }

	'=' 

{ after(grammarAccess.getExpressionDeclarationAccess().getEqualsSignKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ExpressionDeclaration__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExpressionDeclaration__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionDeclaration__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionDeclarationAccess().getBodyAssignment_4()); }
(rule__ExpressionDeclaration__BodyAssignment_4)
{ after(grammarAccess.getExpressionDeclarationAccess().getBodyAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__ExpressionDeclaration__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExpressionDeclaration__Group_2__0__Impl
	rule__ExpressionDeclaration__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionDeclaration__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionDeclarationAccess().getLeftSquareBracketKeyword_2_0()); }

	'[' 

{ after(grammarAccess.getExpressionDeclarationAccess().getLeftSquareBracketKeyword_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ExpressionDeclaration__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExpressionDeclaration__Group_2__1__Impl
	rule__ExpressionDeclaration__Group_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionDeclaration__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionDeclarationAccess().getVarsAssignment_2_1()); }
(rule__ExpressionDeclaration__VarsAssignment_2_1)
{ after(grammarAccess.getExpressionDeclarationAccess().getVarsAssignment_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ExpressionDeclaration__Group_2__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExpressionDeclaration__Group_2__2__Impl
	rule__ExpressionDeclaration__Group_2__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionDeclaration__Group_2__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionDeclarationAccess().getGroup_2_2()); }
(rule__ExpressionDeclaration__Group_2_2__0)*
{ after(grammarAccess.getExpressionDeclarationAccess().getGroup_2_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ExpressionDeclaration__Group_2__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExpressionDeclaration__Group_2__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionDeclaration__Group_2__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionDeclarationAccess().getRightSquareBracketKeyword_2_3()); }

	']' 

{ after(grammarAccess.getExpressionDeclarationAccess().getRightSquareBracketKeyword_2_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__ExpressionDeclaration__Group_2_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExpressionDeclaration__Group_2_2__0__Impl
	rule__ExpressionDeclaration__Group_2_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionDeclaration__Group_2_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionDeclarationAccess().getCommaKeyword_2_2_0()); }

	',' 

{ after(grammarAccess.getExpressionDeclarationAccess().getCommaKeyword_2_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ExpressionDeclaration__Group_2_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExpressionDeclaration__Group_2_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionDeclaration__Group_2_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionDeclarationAccess().getVarsAssignment_2_2_1()); }
(rule__ExpressionDeclaration__VarsAssignment_2_2_1)
{ after(grammarAccess.getExpressionDeclarationAccess().getVarsAssignment_2_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Choice__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Choice__Group__0__Impl
	rule__Choice__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Choice__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getChoiceAccess().getSequenceParserRuleCall_0()); }
	ruleSequence
{ after(grammarAccess.getChoiceAccess().getSequenceParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Choice__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Choice__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Choice__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getChoiceAccess().getGroup_1()); }
(rule__Choice__Group_1__0)?
{ after(grammarAccess.getChoiceAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Choice__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Choice__Group_1__0__Impl
	rule__Choice__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Choice__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getChoiceAccess().getChoiceElementsAction_1_0()); }
(

)
{ after(grammarAccess.getChoiceAccess().getChoiceElementsAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Choice__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Choice__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Choice__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
(
{ before(grammarAccess.getChoiceAccess().getGroup_1_1()); }
(rule__Choice__Group_1_1__0)
{ after(grammarAccess.getChoiceAccess().getGroup_1_1()); }
)
(
{ before(grammarAccess.getChoiceAccess().getGroup_1_1()); }
(rule__Choice__Group_1_1__0)*
{ after(grammarAccess.getChoiceAccess().getGroup_1_1()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Choice__Group_1_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Choice__Group_1_1__0__Impl
	rule__Choice__Group_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Choice__Group_1_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getChoiceAccess().getVerticalLineKeyword_1_1_0()); }

	'|' 

{ after(grammarAccess.getChoiceAccess().getVerticalLineKeyword_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Choice__Group_1_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Choice__Group_1_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Choice__Group_1_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getChoiceAccess().getElementsAssignment_1_1_1()); }
(rule__Choice__ElementsAssignment_1_1_1)
{ after(grammarAccess.getChoiceAccess().getElementsAssignment_1_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Sequence__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Sequence__Group__0__Impl
	rule__Sequence__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Sequence__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSequenceAccess().getMultExpressionParserRuleCall_0()); }
	ruleMultExpression
{ after(grammarAccess.getSequenceAccess().getMultExpressionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Sequence__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Sequence__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Sequence__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSequenceAccess().getGroup_1()); }
(rule__Sequence__Group_1__0)?
{ after(grammarAccess.getSequenceAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Sequence__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Sequence__Group_1__0__Impl
	rule__Sequence__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Sequence__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSequenceAccess().getSequenceElementsAction_1_0()); }
(

)
{ after(grammarAccess.getSequenceAccess().getSequenceElementsAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Sequence__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Sequence__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Sequence__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
(
{ before(grammarAccess.getSequenceAccess().getElementsAssignment_1_1()); }
(rule__Sequence__ElementsAssignment_1_1)
{ after(grammarAccess.getSequenceAccess().getElementsAssignment_1_1()); }
)
(
{ before(grammarAccess.getSequenceAccess().getElementsAssignment_1_1()); }
(rule__Sequence__ElementsAssignment_1_1)*
{ after(grammarAccess.getSequenceAccess().getElementsAssignment_1_1()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}






rule__MultExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MultExpression__Group__0__Impl
	rule__MultExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MultExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultExpressionAccess().getParenExpressionParserRuleCall_0()); }
	ruleParenExpression
{ after(grammarAccess.getMultExpressionAccess().getParenExpressionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MultExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MultExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MultExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultExpressionAccess().getAlternatives_1()); }
(rule__MultExpression__Alternatives_1)?
{ after(grammarAccess.getMultExpressionAccess().getAlternatives_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__MultExpression__Group_1_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MultExpression__Group_1_0__0__Impl
	rule__MultExpression__Group_1_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MultExpression__Group_1_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultExpressionAccess().getStarBodyAction_1_0_0()); }
(

)
{ after(grammarAccess.getMultExpressionAccess().getStarBodyAction_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MultExpression__Group_1_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MultExpression__Group_1_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MultExpression__Group_1_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultExpressionAccess().getAsteriskKeyword_1_0_1()); }

	'*' 

{ after(grammarAccess.getMultExpressionAccess().getAsteriskKeyword_1_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__MultExpression__Group_1_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MultExpression__Group_1_1__0__Impl
	rule__MultExpression__Group_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MultExpression__Group_1_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultExpressionAccess().getPlusBodyAction_1_1_0()); }
(

)
{ after(grammarAccess.getMultExpressionAccess().getPlusBodyAction_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MultExpression__Group_1_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MultExpression__Group_1_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MultExpression__Group_1_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultExpressionAccess().getPlusSignKeyword_1_1_1()); }

	'+' 

{ after(grammarAccess.getMultExpressionAccess().getPlusSignKeyword_1_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__MultExpression__Group_1_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MultExpression__Group_1_2__0__Impl
	rule__MultExpression__Group_1_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MultExpression__Group_1_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultExpressionAccess().getCardinalityBodyAction_1_2_0()); }
(

)
{ after(grammarAccess.getMultExpressionAccess().getCardinalityBodyAction_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MultExpression__Group_1_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MultExpression__Group_1_2__1__Impl
	rule__MultExpression__Group_1_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__MultExpression__Group_1_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultExpressionAccess().getLeftCurlyBracketKeyword_1_2_1()); }

	'{' 

{ after(grammarAccess.getMultExpressionAccess().getLeftCurlyBracketKeyword_1_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MultExpression__Group_1_2__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MultExpression__Group_1_2__2__Impl
	rule__MultExpression__Group_1_2__3
;
finally {
	restoreStackSize(stackSize);
}

rule__MultExpression__Group_1_2__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultExpressionAccess().getNAssignment_1_2_2()); }
(rule__MultExpression__NAssignment_1_2_2)
{ after(grammarAccess.getMultExpressionAccess().getNAssignment_1_2_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MultExpression__Group_1_2__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MultExpression__Group_1_2__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MultExpression__Group_1_2__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultExpressionAccess().getRightCurlyBracketKeyword_1_2_3()); }

	'}' 

{ after(grammarAccess.getMultExpressionAccess().getRightCurlyBracketKeyword_1_2_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__ParenExpression__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ParenExpression__Group_0__0__Impl
	rule__ParenExpression__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ParenExpression__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParenExpressionAccess().getLeftParenthesisKeyword_0_0()); }

	'(' 

{ after(grammarAccess.getParenExpressionAccess().getLeftParenthesisKeyword_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ParenExpression__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ParenExpression__Group_0__1__Impl
	rule__ParenExpression__Group_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ParenExpression__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParenExpressionAccess().getExpressionParserRuleCall_0_1()); }
	ruleExpression
{ after(grammarAccess.getParenExpressionAccess().getExpressionParserRuleCall_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ParenExpression__Group_0__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ParenExpression__Group_0__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ParenExpression__Group_0__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParenExpressionAccess().getRightParenthesisKeyword_0_2()); }

	')' 

{ after(grammarAccess.getParenExpressionAccess().getRightParenthesisKeyword_0_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Any__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Any__Group__0__Impl
	rule__Any__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Any__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAnyAccess().getAnyAction_0()); }
(

)
{ after(grammarAccess.getAnyAccess().getAnyAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Any__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Any__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Any__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAnyAccess().getSKeyword_1()); }

	'S' 

{ after(grammarAccess.getAnyAccess().getSKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Inverse__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Inverse__Group__0__Impl
	rule__Inverse__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Inverse__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInverseAccess().getLeftParenthesisKeyword_0()); }

	'(' 

{ after(grammarAccess.getInverseAccess().getLeftParenthesisKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Inverse__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Inverse__Group__1__Impl
	rule__Inverse__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Inverse__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInverseAccess().getSKeyword_1()); }

	'S' 

{ after(grammarAccess.getInverseAccess().getSKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Inverse__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Inverse__Group__2__Impl
	rule__Inverse__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Inverse__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInverseAccess().getReverseSolidusKeyword_2()); }

	'\\' 

{ after(grammarAccess.getInverseAccess().getReverseSolidusKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Inverse__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Inverse__Group__3__Impl
	rule__Inverse__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Inverse__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInverseAccess().getExcludesAssignment_3()); }
(rule__Inverse__ExcludesAssignment_3)
{ after(grammarAccess.getInverseAccess().getExcludesAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Inverse__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Inverse__Group__4__Impl
	rule__Inverse__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Inverse__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInverseAccess().getGroup_4()); }
(rule__Inverse__Group_4__0)*
{ after(grammarAccess.getInverseAccess().getGroup_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Inverse__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Inverse__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Inverse__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInverseAccess().getRightParenthesisKeyword_5()); }

	')' 

{ after(grammarAccess.getInverseAccess().getRightParenthesisKeyword_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}














rule__Inverse__Group_4__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Inverse__Group_4__0__Impl
	rule__Inverse__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Inverse__Group_4__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInverseAccess().getCommaKeyword_4_0()); }

	',' 

{ after(grammarAccess.getInverseAccess().getCommaKeyword_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Inverse__Group_4__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Inverse__Group_4__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Inverse__Group_4__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInverseAccess().getExcludesAssignment_4_1()); }
(rule__Inverse__ExcludesAssignment_4_1)
{ after(grammarAccess.getInverseAccess().getExcludesAssignment_4_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__TimedExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TimedExpression__Group__0__Impl
	rule__TimedExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TimedExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTimedExpressionAccess().getLessThanSignKeyword_0()); }

	'<' 

{ after(grammarAccess.getTimedExpressionAccess().getLessThanSignKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TimedExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TimedExpression__Group__1__Impl
	rule__TimedExpression__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__TimedExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTimedExpressionAccess().getBodyAssignment_1()); }
(rule__TimedExpression__BodyAssignment_1)
{ after(grammarAccess.getTimedExpressionAccess().getBodyAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TimedExpression__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TimedExpression__Group__2__Impl
	rule__TimedExpression__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__TimedExpression__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTimedExpressionAccess().getGreaterThanSignKeyword_2()); }

	'>' 

{ after(grammarAccess.getTimedExpressionAccess().getGreaterThanSignKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TimedExpression__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TimedExpression__Group__3__Impl
	rule__TimedExpression__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__TimedExpression__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTimedExpressionAccess().getLeftSquareBracketKeyword_3()); }

	'[' 

{ after(grammarAccess.getTimedExpressionAccess().getLeftSquareBracketKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TimedExpression__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TimedExpression__Group__4__Impl
	rule__TimedExpression__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__TimedExpression__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTimedExpressionAccess().getTimeoutAssignment_4()); }
(rule__TimedExpression__TimeoutAssignment_4)
{ after(grammarAccess.getTimedExpressionAccess().getTimeoutAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TimedExpression__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TimedExpression__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TimedExpression__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTimedExpressionAccess().getRightSquareBracketKeyword_5()); }

	']' 

{ after(grammarAccess.getTimedExpressionAccess().getRightSquareBracketKeyword_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}














rule__Event__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Event__Group__0__Impl
	rule__Event__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Event__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEventAccess().getFunctorAssignment_0()); }
(rule__Event__FunctorAssignment_0)
{ after(grammarAccess.getEventAccess().getFunctorAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Event__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Event__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Event__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEventAccess().getGroup_1()); }
(rule__Event__Group_1__0)?
{ after(grammarAccess.getEventAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Event__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Event__Group_1__0__Impl
	rule__Event__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Event__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEventAccess().getLeftSquareBracketKeyword_1_0()); }

	'[' 

{ after(grammarAccess.getEventAccess().getLeftSquareBracketKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Event__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Event__Group_1__1__Impl
	rule__Event__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Event__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEventAccess().getParametersAssignment_1_1()); }
(rule__Event__ParametersAssignment_1_1)
{ after(grammarAccess.getEventAccess().getParametersAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Event__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Event__Group_1__2__Impl
	rule__Event__Group_1__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Event__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEventAccess().getGroup_1_2()); }
(rule__Event__Group_1_2__0)*
{ after(grammarAccess.getEventAccess().getGroup_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Event__Group_1__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Event__Group_1__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Event__Group_1__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEventAccess().getRightSquareBracketKeyword_1_3()); }

	']' 

{ after(grammarAccess.getEventAccess().getRightSquareBracketKeyword_1_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__Event__Group_1_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Event__Group_1_2__0__Impl
	rule__Event__Group_1_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Event__Group_1_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEventAccess().getCommaKeyword_1_2_0()); }

	',' 

{ after(grammarAccess.getEventAccess().getCommaKeyword_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Event__Group_1_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Event__Group_1_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Event__Group_1_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEventAccess().getParametersAssignment_1_2_1()); }
(rule__Event__ParametersAssignment_1_2_1)
{ after(grammarAccess.getEventAccess().getParametersAssignment_1_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__SingletonParameter__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SingletonParameter__Group__0__Impl
	rule__SingletonParameter__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SingletonParameter__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSingletonParameterAccess().getSingletonParameterAction_0()); }
(

)
{ after(grammarAccess.getSingletonParameterAccess().getSingletonParameterAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SingletonParameter__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SingletonParameter__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SingletonParameter__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSingletonParameterAccess().get_Keyword_1()); }

	'_' 

{ after(grammarAccess.getSingletonParameterAccess().get_Keyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}







rule__RegexModel__AlphabetAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRegexModelAccess().getAlphabetAlphabetParserRuleCall_0_0()); }
	ruleAlphabet{ after(grammarAccess.getRegexModelAccess().getAlphabetAlphabetParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RegexModel__DeclarationsAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRegexModelAccess().getDeclarationsExpressionDeclarationParserRuleCall_1_0()); }
	ruleExpressionDeclaration{ after(grammarAccess.getRegexModelAccess().getDeclarationsExpressionDeclarationParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Alphabet__FunctorsAssignment_4_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAlphabetAccess().getFunctorsFunctorParserRuleCall_4_0_0()); }
	ruleFunctor{ after(grammarAccess.getAlphabetAccess().getFunctorsFunctorParserRuleCall_4_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Alphabet__FunctorsAssignment_4_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAlphabetAccess().getFunctorsFunctorParserRuleCall_4_1_1_0()); }
	ruleFunctor{ after(grammarAccess.getAlphabetAccess().getFunctorsFunctorParserRuleCall_4_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Functor__NameAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctorAccess().getNameIDTerminalRuleCall_0_0()); }
	RULE_ID{ after(grammarAccess.getFunctorAccess().getNameIDTerminalRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Functor__ArityAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctorAccess().getArityINTTerminalRuleCall_1_1_0()); }
	RULE_INT{ after(grammarAccess.getFunctorAccess().getArityINTTerminalRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionDeclaration__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionDeclarationAccess().getNameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getExpressionDeclarationAccess().getNameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionDeclaration__VarsAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionDeclarationAccess().getVarsVarParserRuleCall_2_1_0()); }
	ruleVar{ after(grammarAccess.getExpressionDeclarationAccess().getVarsVarParserRuleCall_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionDeclaration__VarsAssignment_2_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionDeclarationAccess().getVarsVarParserRuleCall_2_2_1_0()); }
	ruleVar{ after(grammarAccess.getExpressionDeclarationAccess().getVarsVarParserRuleCall_2_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionDeclaration__BodyAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionDeclarationAccess().getBodyExpressionParserRuleCall_4_0()); }
	ruleExpression{ after(grammarAccess.getExpressionDeclarationAccess().getBodyExpressionParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Choice__ElementsAssignment_1_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getChoiceAccess().getElementsSequenceParserRuleCall_1_1_1_0()); }
	ruleSequence{ after(grammarAccess.getChoiceAccess().getElementsSequenceParserRuleCall_1_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Sequence__ElementsAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSequenceAccess().getElementsMultExpressionParserRuleCall_1_1_0()); }
	ruleMultExpression{ after(grammarAccess.getSequenceAccess().getElementsMultExpressionParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MultExpression__NAssignment_1_2_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultExpressionAccess().getNINTTerminalRuleCall_1_2_2_0()); }
	RULE_INT{ after(grammarAccess.getMultExpressionAccess().getNINTTerminalRuleCall_1_2_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Inverse__ExcludesAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInverseAccess().getExcludesEventParserRuleCall_3_0()); }
	ruleEvent{ after(grammarAccess.getInverseAccess().getExcludesEventParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Inverse__ExcludesAssignment_4_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInverseAccess().getExcludesEventParserRuleCall_4_1_0()); }
	ruleEvent{ after(grammarAccess.getInverseAccess().getExcludesEventParserRuleCall_4_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TimedExpression__BodyAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTimedExpressionAccess().getBodyExpressionParserRuleCall_1_0()); }
	ruleExpression{ after(grammarAccess.getTimedExpressionAccess().getBodyExpressionParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TimedExpression__TimeoutAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTimedExpressionAccess().getTimeoutINTTerminalRuleCall_4_0()); }
	RULE_INT{ after(grammarAccess.getTimedExpressionAccess().getTimeoutINTTerminalRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Event__FunctorAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEventAccess().getFunctorFunctorCrossReference_0_0()); }
(
{ before(grammarAccess.getEventAccess().getFunctorFunctorIDTerminalRuleCall_0_0_1()); }
	RULE_ID{ after(grammarAccess.getEventAccess().getFunctorFunctorIDTerminalRuleCall_0_0_1()); }
)
{ after(grammarAccess.getEventAccess().getFunctorFunctorCrossReference_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Event__ParametersAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEventAccess().getParametersParameterParserRuleCall_1_1_0()); }
	ruleParameter{ after(grammarAccess.getEventAccess().getParametersParameterParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Event__ParametersAssignment_1_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEventAccess().getParametersParameterParserRuleCall_1_2_1_0()); }
	ruleParameter{ after(grammarAccess.getEventAccess().getParametersParameterParserRuleCall_1_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FixIntParameter__BodyAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFixIntParameterAccess().getBodyINTTerminalRuleCall_0()); }
	RULE_INT{ after(grammarAccess.getFixIntParameterAccess().getBodyINTTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FixStringParameter__BodyAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFixStringParameterAccess().getBodySTRINGTerminalRuleCall_0()); }
	RULE_STRING{ after(grammarAccess.getFixStringParameterAccess().getBodySTRINGTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__VarParameter__VarAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVarParameterAccess().getVarVarCrossReference_0()); }
(
{ before(grammarAccess.getVarParameterAccess().getVarVarIDTerminalRuleCall_0_1()); }
	RULE_ID{ after(grammarAccess.getVarParameterAccess().getVarVarIDTerminalRuleCall_0_1()); }
)
{ after(grammarAccess.getVarParameterAccess().getVarVarCrossReference_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Var__NameAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVarAccess().getNameIDTerminalRuleCall_0()); }
	RULE_ID{ after(grammarAccess.getVarAccess().getNameIDTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_ID : '^'? ('a'..'z'|'A'..'Z') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


