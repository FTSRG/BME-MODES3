/*
 * generated by Xtext
 */
package hu.bme.mit.ftsrg.ptregex.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class RegularExpressionGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class RegexModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RegexModel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAlphabetAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAlphabetAlphabetParserRuleCall_0_0 = (RuleCall)cAlphabetAssignment_0.eContents().get(0);
		private final Assignment cDeclarationsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDeclarationsExpressionDeclarationParserRuleCall_1_0 = (RuleCall)cDeclarationsAssignment_1.eContents().get(0);
		
		//RegexModel:
		//	alphabet=Alphabet? declarations+=ExpressionDeclaration*;
		@Override public ParserRule getRule() { return rule; }

		//alphabet=Alphabet? declarations+=ExpressionDeclaration*
		public Group getGroup() { return cGroup; }

		//alphabet=Alphabet?
		public Assignment getAlphabetAssignment_0() { return cAlphabetAssignment_0; }

		//Alphabet
		public RuleCall getAlphabetAlphabetParserRuleCall_0_0() { return cAlphabetAlphabetParserRuleCall_0_0; }

		//declarations+=ExpressionDeclaration*
		public Assignment getDeclarationsAssignment_1() { return cDeclarationsAssignment_1; }

		//ExpressionDeclaration
		public RuleCall getDeclarationsExpressionDeclarationParserRuleCall_1_0() { return cDeclarationsExpressionDeclarationParserRuleCall_1_0; }
	}

	public class AlphabetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Alphabet");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAlphabetAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cAlphabetKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Assignment cFunctorsAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final RuleCall cFunctorsFunctorParserRuleCall_4_0_0 = (RuleCall)cFunctorsAssignment_4_0.eContents().get(0);
		private final Group cGroup_4_1 = (Group)cGroup_4.eContents().get(1);
		private final Keyword cCommaKeyword_4_1_0 = (Keyword)cGroup_4_1.eContents().get(0);
		private final Assignment cFunctorsAssignment_4_1_1 = (Assignment)cGroup_4_1.eContents().get(1);
		private final RuleCall cFunctorsFunctorParserRuleCall_4_1_1_0 = (RuleCall)cFunctorsAssignment_4_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Alphabet:
		//	{Alphabet} "alphabet" "=" "{" (functors+=Functor ("," functors+=Functor)*)? "}";
		@Override public ParserRule getRule() { return rule; }

		//{Alphabet} "alphabet" "=" "{" (functors+=Functor ("," functors+=Functor)*)? "}"
		public Group getGroup() { return cGroup; }

		//{Alphabet}
		public Action getAlphabetAction_0() { return cAlphabetAction_0; }

		//"alphabet"
		public Keyword getAlphabetKeyword_1() { return cAlphabetKeyword_1; }

		//"="
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//(functors+=Functor ("," functors+=Functor)*)?
		public Group getGroup_4() { return cGroup_4; }

		//functors+=Functor
		public Assignment getFunctorsAssignment_4_0() { return cFunctorsAssignment_4_0; }

		//Functor
		public RuleCall getFunctorsFunctorParserRuleCall_4_0_0() { return cFunctorsFunctorParserRuleCall_4_0_0; }

		//("," functors+=Functor)*
		public Group getGroup_4_1() { return cGroup_4_1; }

		//","
		public Keyword getCommaKeyword_4_1_0() { return cCommaKeyword_4_1_0; }

		//functors+=Functor
		public Assignment getFunctorsAssignment_4_1_1() { return cFunctorsAssignment_4_1_1; }

		//Functor
		public RuleCall getFunctorsFunctorParserRuleCall_4_1_1_0() { return cFunctorsFunctorParserRuleCall_4_1_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class FunctorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Functor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cSolidusKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cArityAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cArityINTTerminalRuleCall_1_1_0 = (RuleCall)cArityAssignment_1_1.eContents().get(0);
		
		//Functor:
		//	name=ID ("/" arity=INT)?;
		@Override public ParserRule getRule() { return rule; }

		//name=ID ("/" arity=INT)?
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//("/" arity=INT)?
		public Group getGroup_1() { return cGroup_1; }

		//"/"
		public Keyword getSolidusKeyword_1_0() { return cSolidusKeyword_1_0; }

		//arity=INT
		public Assignment getArityAssignment_1_1() { return cArityAssignment_1_1; }

		//INT
		public RuleCall getArityINTTerminalRuleCall_1_1_0() { return cArityINTTerminalRuleCall_1_1_0; }
	}

	public class ExpressionDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExpressionDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cExpressionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftSquareBracketKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cVarsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cVarsVarParserRuleCall_2_1_0 = (RuleCall)cVarsAssignment_2_1.eContents().get(0);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Keyword cCommaKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Assignment cVarsAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final RuleCall cVarsVarParserRuleCall_2_2_1_0 = (RuleCall)cVarsAssignment_2_2_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		private final Keyword cEqualsSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cBodyAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cBodyExpressionParserRuleCall_4_0 = (RuleCall)cBodyAssignment_4.eContents().get(0);
		
		//ExpressionDeclaration:
		//	"expression" name=ID ("[" vars+=Var ("," vars+=Var)* "]")? "=" body=Expression;
		@Override public ParserRule getRule() { return rule; }

		//"expression" name=ID ("[" vars+=Var ("," vars+=Var)* "]")? "=" body=Expression
		public Group getGroup() { return cGroup; }

		//"expression"
		public Keyword getExpressionKeyword_0() { return cExpressionKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//("[" vars+=Var ("," vars+=Var)* "]")?
		public Group getGroup_2() { return cGroup_2; }

		//"["
		public Keyword getLeftSquareBracketKeyword_2_0() { return cLeftSquareBracketKeyword_2_0; }

		//vars+=Var
		public Assignment getVarsAssignment_2_1() { return cVarsAssignment_2_1; }

		//Var
		public RuleCall getVarsVarParserRuleCall_2_1_0() { return cVarsVarParserRuleCall_2_1_0; }

		//("," vars+=Var)*
		public Group getGroup_2_2() { return cGroup_2_2; }

		//","
		public Keyword getCommaKeyword_2_2_0() { return cCommaKeyword_2_2_0; }

		//vars+=Var
		public Assignment getVarsAssignment_2_2_1() { return cVarsAssignment_2_2_1; }

		//Var
		public RuleCall getVarsVarParserRuleCall_2_2_1_0() { return cVarsVarParserRuleCall_2_2_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_2_3() { return cRightSquareBracketKeyword_2_3; }

		//"="
		public Keyword getEqualsSignKeyword_3() { return cEqualsSignKeyword_3; }

		//body=Expression
		public Assignment getBodyAssignment_4() { return cBodyAssignment_4; }

		//Expression
		public RuleCall getBodyExpressionParserRuleCall_4_0() { return cBodyExpressionParserRuleCall_4_0; }
	}

	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Expression");
		private final RuleCall cChoiceParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Expression:
		//	Choice;
		@Override public ParserRule getRule() { return rule; }

		//Choice
		public RuleCall getChoiceParserRuleCall() { return cChoiceParserRuleCall; }
	}

	public class ChoiceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Choice");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cSequenceParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cChoiceElementsAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Keyword cVerticalLineKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cElementsAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cElementsSequenceParserRuleCall_1_1_1_0 = (RuleCall)cElementsAssignment_1_1_1.eContents().get(0);
		
		//Choice returns Expression:
		//	Sequence ({Choice.elements+=current} ("|" elements+=Sequence)+)?;
		@Override public ParserRule getRule() { return rule; }

		//Sequence ({Choice.elements+=current} ("|" elements+=Sequence)+)?
		public Group getGroup() { return cGroup; }

		//Sequence
		public RuleCall getSequenceParserRuleCall_0() { return cSequenceParserRuleCall_0; }

		//({Choice.elements+=current} ("|" elements+=Sequence)+)?
		public Group getGroup_1() { return cGroup_1; }

		//{Choice.elements+=current}
		public Action getChoiceElementsAction_1_0() { return cChoiceElementsAction_1_0; }

		//("|" elements+=Sequence)+
		public Group getGroup_1_1() { return cGroup_1_1; }

		//"|"
		public Keyword getVerticalLineKeyword_1_1_0() { return cVerticalLineKeyword_1_1_0; }

		//elements+=Sequence
		public Assignment getElementsAssignment_1_1_1() { return cElementsAssignment_1_1_1; }

		//Sequence
		public RuleCall getElementsSequenceParserRuleCall_1_1_1_0() { return cElementsSequenceParserRuleCall_1_1_1_0; }
	}

	public class SequenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Sequence");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cMultExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cSequenceElementsAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cElementsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cElementsMultExpressionParserRuleCall_1_1_0 = (RuleCall)cElementsAssignment_1_1.eContents().get(0);
		
		//Sequence returns Expression:
		//	MultExpression ({Sequence.elements+=current} elements+=MultExpression+)?;
		@Override public ParserRule getRule() { return rule; }

		//MultExpression ({Sequence.elements+=current} elements+=MultExpression+)?
		public Group getGroup() { return cGroup; }

		//MultExpression
		public RuleCall getMultExpressionParserRuleCall_0() { return cMultExpressionParserRuleCall_0; }

		//({Sequence.elements+=current} elements+=MultExpression+)?
		public Group getGroup_1() { return cGroup_1; }

		//{Sequence.elements+=current}
		public Action getSequenceElementsAction_1_0() { return cSequenceElementsAction_1_0; }

		//elements+=MultExpression+
		public Assignment getElementsAssignment_1_1() { return cElementsAssignment_1_1; }

		//MultExpression
		public RuleCall getElementsMultExpressionParserRuleCall_1_1_0() { return cElementsMultExpressionParserRuleCall_1_1_0; }
	}

	public class MultExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MultExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cParenExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Action cStarBodyAction_1_0_0 = (Action)cGroup_1_0.eContents().get(0);
		private final Keyword cAsteriskKeyword_1_0_1 = (Keyword)cGroup_1_0.eContents().get(1);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Action cPlusBodyAction_1_1_0 = (Action)cGroup_1_1.eContents().get(0);
		private final Keyword cPlusSignKeyword_1_1_1 = (Keyword)cGroup_1_1.eContents().get(1);
		private final Group cGroup_1_2 = (Group)cAlternatives_1.eContents().get(2);
		private final Action cCardinalityBodyAction_1_2_0 = (Action)cGroup_1_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1_2_1 = (Keyword)cGroup_1_2.eContents().get(1);
		private final Assignment cNAssignment_1_2_2 = (Assignment)cGroup_1_2.eContents().get(2);
		private final RuleCall cNINTTerminalRuleCall_1_2_2_0 = (RuleCall)cNAssignment_1_2_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_1_2_3 = (Keyword)cGroup_1_2.eContents().get(3);
		
		//MultExpression returns Expression:
		//	ParenExpression ({Star.body=current} "*" | {Plus.body=current} "+" | {Cardinality.body=current} "{" n=INT "}")?;
		@Override public ParserRule getRule() { return rule; }

		//ParenExpression ({Star.body=current} "*" | {Plus.body=current} "+" | {Cardinality.body=current} "{" n=INT "}")?
		public Group getGroup() { return cGroup; }

		//ParenExpression
		public RuleCall getParenExpressionParserRuleCall_0() { return cParenExpressionParserRuleCall_0; }

		//({Star.body=current} "*" | {Plus.body=current} "+" | {Cardinality.body=current} "{" n=INT "}")?
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//{Star.body=current} "*"
		public Group getGroup_1_0() { return cGroup_1_0; }

		//{Star.body=current}
		public Action getStarBodyAction_1_0_0() { return cStarBodyAction_1_0_0; }

		//"*"
		public Keyword getAsteriskKeyword_1_0_1() { return cAsteriskKeyword_1_0_1; }

		//{Plus.body=current} "+"
		public Group getGroup_1_1() { return cGroup_1_1; }

		//{Plus.body=current}
		public Action getPlusBodyAction_1_1_0() { return cPlusBodyAction_1_1_0; }

		//"+"
		public Keyword getPlusSignKeyword_1_1_1() { return cPlusSignKeyword_1_1_1; }

		//{Cardinality.body=current} "{" n=INT "}"
		public Group getGroup_1_2() { return cGroup_1_2; }

		//{Cardinality.body=current}
		public Action getCardinalityBodyAction_1_2_0() { return cCardinalityBodyAction_1_2_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1_2_1() { return cLeftCurlyBracketKeyword_1_2_1; }

		//n=INT
		public Assignment getNAssignment_1_2_2() { return cNAssignment_1_2_2; }

		//INT
		public RuleCall getNINTTerminalRuleCall_1_2_2_0() { return cNINTTerminalRuleCall_1_2_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_1_2_3() { return cRightCurlyBracketKeyword_1_2_3; }
	}

	public class ParenExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ParenExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final RuleCall cExpressionParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final RuleCall cAnyParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cInverseParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cTimedExpressionParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cEventParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//ParenExpression returns Expression:
		//	"(" Expression ")" | Any | Inverse | TimedExpression | Event;
		@Override public ParserRule getRule() { return rule; }

		//"(" Expression ")" | Any | Inverse | TimedExpression | Event
		public Alternatives getAlternatives() { return cAlternatives; }

		//"(" Expression ")"
		public Group getGroup_0() { return cGroup_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_0_0() { return cLeftParenthesisKeyword_0_0; }

		//Expression
		public RuleCall getExpressionParserRuleCall_0_1() { return cExpressionParserRuleCall_0_1; }

		//")"
		public Keyword getRightParenthesisKeyword_0_2() { return cRightParenthesisKeyword_0_2; }

		//Any
		public RuleCall getAnyParserRuleCall_1() { return cAnyParserRuleCall_1; }

		//Inverse
		public RuleCall getInverseParserRuleCall_2() { return cInverseParserRuleCall_2; }

		//TimedExpression
		public RuleCall getTimedExpressionParserRuleCall_3() { return cTimedExpressionParserRuleCall_3; }

		//Event
		public RuleCall getEventParserRuleCall_4() { return cEventParserRuleCall_4; }
	}

	public class AnyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Any");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAnyAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cSKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//Any:
		//	{Any} "S";
		@Override public ParserRule getRule() { return rule; }

		//{Any} "S"
		public Group getGroup() { return cGroup; }

		//{Any}
		public Action getAnyAction_0() { return cAnyAction_0; }

		//"S"
		public Keyword getSKeyword_1() { return cSKeyword_1; }
	}

	public class InverseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Inverse");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cSKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cReverseSolidusKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cExcludesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cExcludesEventParserRuleCall_3_0 = (RuleCall)cExcludesAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cExcludesAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cExcludesEventParserRuleCall_4_1_0 = (RuleCall)cExcludesAssignment_4_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Inverse:
		//	"(" "S" "\\" excludes+=Event ("," excludes+=Event)* ")";
		@Override public ParserRule getRule() { return rule; }

		//"(" "S" "\\" excludes+=Event ("," excludes+=Event)* ")"
		public Group getGroup() { return cGroup; }

		//"("
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }

		//"S"
		public Keyword getSKeyword_1() { return cSKeyword_1; }

		//"\\"
		public Keyword getReverseSolidusKeyword_2() { return cReverseSolidusKeyword_2; }

		//excludes+=Event
		public Assignment getExcludesAssignment_3() { return cExcludesAssignment_3; }

		//Event
		public RuleCall getExcludesEventParserRuleCall_3_0() { return cExcludesEventParserRuleCall_3_0; }

		//("," excludes+=Event)*
		public Group getGroup_4() { return cGroup_4; }

		//","
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }

		//excludes+=Event
		public Assignment getExcludesAssignment_4_1() { return cExcludesAssignment_4_1; }

		//Event
		public RuleCall getExcludesEventParserRuleCall_4_1_0() { return cExcludesEventParserRuleCall_4_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}

	public class TimedExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TimedExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLessThanSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cBodyAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cBodyExpressionParserRuleCall_1_0 = (RuleCall)cBodyAssignment_1.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cLeftSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cTimeoutAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cTimeoutINTTerminalRuleCall_4_0 = (RuleCall)cTimeoutAssignment_4.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//TimedExpression:
		//	"<" body=Expression ">" "[" timeout=INT "]";
		@Override public ParserRule getRule() { return rule; }

		//"<" body=Expression ">" "[" timeout=INT "]"
		public Group getGroup() { return cGroup; }

		//"<"
		public Keyword getLessThanSignKeyword_0() { return cLessThanSignKeyword_0; }

		//body=Expression
		public Assignment getBodyAssignment_1() { return cBodyAssignment_1; }

		//Expression
		public RuleCall getBodyExpressionParserRuleCall_1_0() { return cBodyExpressionParserRuleCall_1_0; }

		//">"
		public Keyword getGreaterThanSignKeyword_2() { return cGreaterThanSignKeyword_2; }

		//"["
		public Keyword getLeftSquareBracketKeyword_3() { return cLeftSquareBracketKeyword_3; }

		//timeout=INT
		public Assignment getTimeoutAssignment_4() { return cTimeoutAssignment_4; }

		//INT
		public RuleCall getTimeoutINTTerminalRuleCall_4_0() { return cTimeoutINTTerminalRuleCall_4_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_5() { return cRightSquareBracketKeyword_5; }
	}

	public class EventElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Event");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cFunctorAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cFunctorFunctorCrossReference_0_0 = (CrossReference)cFunctorAssignment_0.eContents().get(0);
		private final RuleCall cFunctorFunctorIDTerminalRuleCall_0_0_1 = (RuleCall)cFunctorFunctorCrossReference_0_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cParametersAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cParametersParameterParserRuleCall_1_1_0 = (RuleCall)cParametersAssignment_1_1.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final Keyword cCommaKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Assignment cParametersAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final RuleCall cParametersParameterParserRuleCall_1_2_1_0 = (RuleCall)cParametersAssignment_1_2_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		
		//Event:
		//	functor=[Functor] ("[" parameters+=Parameter ("," parameters+=Parameter)* "]")?;
		@Override public ParserRule getRule() { return rule; }

		//functor=[Functor] ("[" parameters+=Parameter ("," parameters+=Parameter)* "]")?
		public Group getGroup() { return cGroup; }

		//functor=[Functor]
		public Assignment getFunctorAssignment_0() { return cFunctorAssignment_0; }

		//[Functor]
		public CrossReference getFunctorFunctorCrossReference_0_0() { return cFunctorFunctorCrossReference_0_0; }

		//ID
		public RuleCall getFunctorFunctorIDTerminalRuleCall_0_0_1() { return cFunctorFunctorIDTerminalRuleCall_0_0_1; }

		//("[" parameters+=Parameter ("," parameters+=Parameter)* "]")?
		public Group getGroup_1() { return cGroup_1; }

		//"["
		public Keyword getLeftSquareBracketKeyword_1_0() { return cLeftSquareBracketKeyword_1_0; }

		//parameters+=Parameter
		public Assignment getParametersAssignment_1_1() { return cParametersAssignment_1_1; }

		//Parameter
		public RuleCall getParametersParameterParserRuleCall_1_1_0() { return cParametersParameterParserRuleCall_1_1_0; }

		//("," parameters+=Parameter)*
		public Group getGroup_1_2() { return cGroup_1_2; }

		//","
		public Keyword getCommaKeyword_1_2_0() { return cCommaKeyword_1_2_0; }

		//parameters+=Parameter
		public Assignment getParametersAssignment_1_2_1() { return cParametersAssignment_1_2_1; }

		//Parameter
		public RuleCall getParametersParameterParserRuleCall_1_2_1_0() { return cParametersParameterParserRuleCall_1_2_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_1_3() { return cRightSquareBracketKeyword_1_3; }
	}

	public class ParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Parameter");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cVarParameterParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSingletonParameterParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cFixParameterParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Parameter:
		//	VarParameter | SingletonParameter | FixParameter;
		@Override public ParserRule getRule() { return rule; }

		//VarParameter | SingletonParameter | FixParameter
		public Alternatives getAlternatives() { return cAlternatives; }

		//VarParameter
		public RuleCall getVarParameterParserRuleCall_0() { return cVarParameterParserRuleCall_0; }

		//SingletonParameter
		public RuleCall getSingletonParameterParserRuleCall_1() { return cSingletonParameterParserRuleCall_1; }

		//FixParameter
		public RuleCall getFixParameterParserRuleCall_2() { return cFixParameterParserRuleCall_2; }
	}

	public class FixParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FixParameter");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cFixIntParameterParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cFixStringParameterParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//FixParameter:
		//	FixIntParameter | FixStringParameter;
		@Override public ParserRule getRule() { return rule; }

		//FixIntParameter | FixStringParameter
		public Alternatives getAlternatives() { return cAlternatives; }

		//FixIntParameter
		public RuleCall getFixIntParameterParserRuleCall_0() { return cFixIntParameterParserRuleCall_0; }

		//FixStringParameter
		public RuleCall getFixStringParameterParserRuleCall_1() { return cFixStringParameterParserRuleCall_1; }
	}

	public class FixIntParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FixIntParameter");
		private final Assignment cBodyAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cBodyINTTerminalRuleCall_0 = (RuleCall)cBodyAssignment.eContents().get(0);
		
		//FixIntParameter:
		//	body=INT;
		@Override public ParserRule getRule() { return rule; }

		//body=INT
		public Assignment getBodyAssignment() { return cBodyAssignment; }

		//INT
		public RuleCall getBodyINTTerminalRuleCall_0() { return cBodyINTTerminalRuleCall_0; }
	}

	public class FixStringParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FixStringParameter");
		private final Assignment cBodyAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cBodySTRINGTerminalRuleCall_0 = (RuleCall)cBodyAssignment.eContents().get(0);
		
		//FixStringParameter:
		//	body=STRING;
		@Override public ParserRule getRule() { return rule; }

		//body=STRING
		public Assignment getBodyAssignment() { return cBodyAssignment; }

		//STRING
		public RuleCall getBodySTRINGTerminalRuleCall_0() { return cBodySTRINGTerminalRuleCall_0; }
	}

	public class VarParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VarParameter");
		private final Assignment cVarAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cVarVarCrossReference_0 = (CrossReference)cVarAssignment.eContents().get(0);
		private final RuleCall cVarVarIDTerminalRuleCall_0_1 = (RuleCall)cVarVarCrossReference_0.eContents().get(1);
		
		//VarParameter:
		//	var=[Var];
		@Override public ParserRule getRule() { return rule; }

		//var=[Var]
		public Assignment getVarAssignment() { return cVarAssignment; }

		//[Var]
		public CrossReference getVarVarCrossReference_0() { return cVarVarCrossReference_0; }

		//ID
		public RuleCall getVarVarIDTerminalRuleCall_0_1() { return cVarVarIDTerminalRuleCall_0_1; }
	}

	public class SingletonParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SingletonParameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSingletonParameterAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword c_Keyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//SingletonParameter:
		//	{SingletonParameter} "_";
		@Override public ParserRule getRule() { return rule; }

		//{SingletonParameter} "_"
		public Group getGroup() { return cGroup; }

		//{SingletonParameter}
		public Action getSingletonParameterAction_0() { return cSingletonParameterAction_0; }

		//"_"
		public Keyword get_Keyword_1() { return c_Keyword_1; }
	}

	public class VarElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Var");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//Var:
		//	name=ID;
		@Override public ParserRule getRule() { return rule; }

		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}
	
	
	private final RegexModelElements pRegexModel;
	private final AlphabetElements pAlphabet;
	private final FunctorElements pFunctor;
	private final ExpressionDeclarationElements pExpressionDeclaration;
	private final ExpressionElements pExpression;
	private final ChoiceElements pChoice;
	private final SequenceElements pSequence;
	private final MultExpressionElements pMultExpression;
	private final ParenExpressionElements pParenExpression;
	private final AnyElements pAny;
	private final InverseElements pInverse;
	private final TimedExpressionElements pTimedExpression;
	private final EventElements pEvent;
	private final ParameterElements pParameter;
	private final FixParameterElements pFixParameter;
	private final FixIntParameterElements pFixIntParameter;
	private final FixStringParameterElements pFixStringParameter;
	private final VarParameterElements pVarParameter;
	private final SingletonParameterElements pSingletonParameter;
	private final VarElements pVar;
	private final TerminalRule tID;
	
	private final Grammar grammar;

	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public RegularExpressionGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pRegexModel = new RegexModelElements();
		this.pAlphabet = new AlphabetElements();
		this.pFunctor = new FunctorElements();
		this.pExpressionDeclaration = new ExpressionDeclarationElements();
		this.pExpression = new ExpressionElements();
		this.pChoice = new ChoiceElements();
		this.pSequence = new SequenceElements();
		this.pMultExpression = new MultExpressionElements();
		this.pParenExpression = new ParenExpressionElements();
		this.pAny = new AnyElements();
		this.pInverse = new InverseElements();
		this.pTimedExpression = new TimedExpressionElements();
		this.pEvent = new EventElements();
		this.pParameter = new ParameterElements();
		this.pFixParameter = new FixParameterElements();
		this.pFixIntParameter = new FixIntParameterElements();
		this.pFixStringParameter = new FixStringParameterElements();
		this.pVarParameter = new VarParameterElements();
		this.pSingletonParameter = new SingletonParameterElements();
		this.pVar = new VarElements();
		this.tID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ID");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("hu.bme.mit.ftsrg.ptregex.RegularExpression".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//RegexModel:
	//	alphabet=Alphabet? declarations+=ExpressionDeclaration*;
	public RegexModelElements getRegexModelAccess() {
		return pRegexModel;
	}
	
	public ParserRule getRegexModelRule() {
		return getRegexModelAccess().getRule();
	}

	//Alphabet:
	//	{Alphabet} "alphabet" "=" "{" (functors+=Functor ("," functors+=Functor)*)? "}";
	public AlphabetElements getAlphabetAccess() {
		return pAlphabet;
	}
	
	public ParserRule getAlphabetRule() {
		return getAlphabetAccess().getRule();
	}

	//Functor:
	//	name=ID ("/" arity=INT)?;
	public FunctorElements getFunctorAccess() {
		return pFunctor;
	}
	
	public ParserRule getFunctorRule() {
		return getFunctorAccess().getRule();
	}

	//ExpressionDeclaration:
	//	"expression" name=ID ("[" vars+=Var ("," vars+=Var)* "]")? "=" body=Expression;
	public ExpressionDeclarationElements getExpressionDeclarationAccess() {
		return pExpressionDeclaration;
	}
	
	public ParserRule getExpressionDeclarationRule() {
		return getExpressionDeclarationAccess().getRule();
	}

	//Expression:
	//	Choice;
	public ExpressionElements getExpressionAccess() {
		return pExpression;
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}

	//Choice returns Expression:
	//	Sequence ({Choice.elements+=current} ("|" elements+=Sequence)+)?;
	public ChoiceElements getChoiceAccess() {
		return pChoice;
	}
	
	public ParserRule getChoiceRule() {
		return getChoiceAccess().getRule();
	}

	//Sequence returns Expression:
	//	MultExpression ({Sequence.elements+=current} elements+=MultExpression+)?;
	public SequenceElements getSequenceAccess() {
		return pSequence;
	}
	
	public ParserRule getSequenceRule() {
		return getSequenceAccess().getRule();
	}

	//MultExpression returns Expression:
	//	ParenExpression ({Star.body=current} "*" | {Plus.body=current} "+" | {Cardinality.body=current} "{" n=INT "}")?;
	public MultExpressionElements getMultExpressionAccess() {
		return pMultExpression;
	}
	
	public ParserRule getMultExpressionRule() {
		return getMultExpressionAccess().getRule();
	}

	//ParenExpression returns Expression:
	//	"(" Expression ")" | Any | Inverse | TimedExpression | Event;
	public ParenExpressionElements getParenExpressionAccess() {
		return pParenExpression;
	}
	
	public ParserRule getParenExpressionRule() {
		return getParenExpressionAccess().getRule();
	}

	//Any:
	//	{Any} "S";
	public AnyElements getAnyAccess() {
		return pAny;
	}
	
	public ParserRule getAnyRule() {
		return getAnyAccess().getRule();
	}

	//Inverse:
	//	"(" "S" "\\" excludes+=Event ("," excludes+=Event)* ")";
	public InverseElements getInverseAccess() {
		return pInverse;
	}
	
	public ParserRule getInverseRule() {
		return getInverseAccess().getRule();
	}

	//TimedExpression:
	//	"<" body=Expression ">" "[" timeout=INT "]";
	public TimedExpressionElements getTimedExpressionAccess() {
		return pTimedExpression;
	}
	
	public ParserRule getTimedExpressionRule() {
		return getTimedExpressionAccess().getRule();
	}

	//Event:
	//	functor=[Functor] ("[" parameters+=Parameter ("," parameters+=Parameter)* "]")?;
	public EventElements getEventAccess() {
		return pEvent;
	}
	
	public ParserRule getEventRule() {
		return getEventAccess().getRule();
	}

	//Parameter:
	//	VarParameter | SingletonParameter | FixParameter;
	public ParameterElements getParameterAccess() {
		return pParameter;
	}
	
	public ParserRule getParameterRule() {
		return getParameterAccess().getRule();
	}

	//FixParameter:
	//	FixIntParameter | FixStringParameter;
	public FixParameterElements getFixParameterAccess() {
		return pFixParameter;
	}
	
	public ParserRule getFixParameterRule() {
		return getFixParameterAccess().getRule();
	}

	//FixIntParameter:
	//	body=INT;
	public FixIntParameterElements getFixIntParameterAccess() {
		return pFixIntParameter;
	}
	
	public ParserRule getFixIntParameterRule() {
		return getFixIntParameterAccess().getRule();
	}

	//FixStringParameter:
	//	body=STRING;
	public FixStringParameterElements getFixStringParameterAccess() {
		return pFixStringParameter;
	}
	
	public ParserRule getFixStringParameterRule() {
		return getFixStringParameterAccess().getRule();
	}

	//VarParameter:
	//	var=[Var];
	public VarParameterElements getVarParameterAccess() {
		return pVarParameter;
	}
	
	public ParserRule getVarParameterRule() {
		return getVarParameterAccess().getRule();
	}

	//SingletonParameter:
	//	{SingletonParameter} "_";
	public SingletonParameterElements getSingletonParameterAccess() {
		return pSingletonParameter;
	}
	
	public ParserRule getSingletonParameterRule() {
		return getSingletonParameterAccess().getRule();
	}

	//Var:
	//	name=ID;
	public VarElements getVarAccess() {
		return pVar;
	}
	
	public ParserRule getVarRule() {
		return getVarAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return tID;
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" . / * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\""))* "\"" | "\'" ("\\" .
	//	/ * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
