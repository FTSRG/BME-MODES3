/*
 * generated by Xtext 2.9.1
 */
grammar InternalParametricTimedRegularExpression;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package hu.bme.mit.inf.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package hu.bme.mit.inf.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import hu.bme.mit.inf.services.ParametricTimedRegularExpressionGrammarAccess;

}

@parser::members {

 	private ParametricTimedRegularExpressionGrammarAccess grammarAccess;

    public InternalParametricTimedRegularExpressionParser(TokenStream input, ParametricTimedRegularExpressionGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "RegexModel";
   	}

   	@Override
   	protected ParametricTimedRegularExpressionGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleRegexModel
entryRuleRegexModel returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRegexModelRule()); }
	iv_ruleRegexModel=ruleRegexModel
	{ $current=$iv_ruleRegexModel.current; }
	EOF;

// Rule RegexModel
ruleRegexModel returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getRegexModelAccess().getAlphabetAlphabetParserRuleCall_0_0());
				}
				lv_alphabet_0_0=ruleAlphabet
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRegexModelRule());
					}
					set(
						$current,
						"alphabet",
						lv_alphabet_0_0,
						"hu.bme.mit.inf.ParametricTimedRegularExpression.Alphabet");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getRegexModelAccess().getDeclarationsExpressionDeclarationParserRuleCall_1_0());
				}
				lv_declarations_1_0=ruleExpressionDeclaration
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRegexModelRule());
					}
					add(
						$current,
						"declarations",
						lv_declarations_1_0,
						"hu.bme.mit.inf.ParametricTimedRegularExpression.ExpressionDeclaration");
					afterParserOrEnumRuleCall();
				}
			)
		)+
	)
;

// Entry rule entryRuleAlphabet
entryRuleAlphabet returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAlphabetRule()); }
	iv_ruleAlphabet=ruleAlphabet
	{ $current=$iv_ruleAlphabet.current; }
	EOF;

// Rule Alphabet
ruleAlphabet returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getAlphabetAccess().getAlphabetAction_0(),
					$current);
			}
		)
		otherlv_1='alphabet'
		{
			newLeafNode(otherlv_1, grammarAccess.getAlphabetAccess().getAlphabetKeyword_1());
		}
		otherlv_2='='
		{
			newLeafNode(otherlv_2, grammarAccess.getAlphabetAccess().getEqualsSignKeyword_2());
		}
		otherlv_3='{'
		{
			newLeafNode(otherlv_3, grammarAccess.getAlphabetAccess().getLeftCurlyBracketKeyword_3());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getAlphabetAccess().getFunctorsFunctorParserRuleCall_4_0_0());
					}
					lv_functors_4_0=ruleFunctor
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAlphabetRule());
						}
						add(
							$current,
							"functors",
							lv_functors_4_0,
							"hu.bme.mit.inf.ParametricTimedRegularExpression.Functor");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_5=','
				{
					newLeafNode(otherlv_5, grammarAccess.getAlphabetAccess().getCommaKeyword_4_1_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getAlphabetAccess().getFunctorsFunctorParserRuleCall_4_1_1_0());
						}
						lv_functors_6_0=ruleFunctor
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getAlphabetRule());
							}
							add(
								$current,
								"functors",
								lv_functors_6_0,
								"hu.bme.mit.inf.ParametricTimedRegularExpression.Functor");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
		)?
		otherlv_7='}'
		{
			newLeafNode(otherlv_7, grammarAccess.getAlphabetAccess().getRightCurlyBracketKeyword_5());
		}
	)
;

// Entry rule entryRuleFunctor
entryRuleFunctor returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFunctorRule()); }
	iv_ruleFunctor=ruleFunctor
	{ $current=$iv_ruleFunctor.current; }
	EOF;

// Rule Functor
ruleFunctor returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_name_0_0=RULE_ID
				{
					newLeafNode(lv_name_0_0, grammarAccess.getFunctorAccess().getNameIDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getFunctorRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_0_0,
						"hu.bme.mit.inf.ParametricTimedRegularExpression.ID");
				}
			)
		)
		(
			otherlv_1='/'
			{
				newLeafNode(otherlv_1, grammarAccess.getFunctorAccess().getSolidusKeyword_1_0());
			}
			(
				(
					lv_arity_2_0=RULE_INT
					{
						newLeafNode(lv_arity_2_0, grammarAccess.getFunctorAccess().getArityINTTerminalRuleCall_1_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getFunctorRule());
						}
						setWithLastConsumed(
							$current,
							"arity",
							lv_arity_2_0,
							"org.eclipse.xtext.common.Terminals.INT");
					}
				)
			)
		)?
	)
;

// Entry rule entryRuleExpressionDeclaration
entryRuleExpressionDeclaration returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExpressionDeclarationRule()); }
	iv_ruleExpressionDeclaration=ruleExpressionDeclaration
	{ $current=$iv_ruleExpressionDeclaration.current; }
	EOF;

// Rule ExpressionDeclaration
ruleExpressionDeclaration returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='expression'
		{
			newLeafNode(otherlv_0, grammarAccess.getExpressionDeclarationAccess().getExpressionKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getExpressionDeclarationAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getExpressionDeclarationRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"hu.bme.mit.inf.ParametricTimedRegularExpression.ID");
				}
			)
		)
		(
			otherlv_2='['
			{
				newLeafNode(otherlv_2, grammarAccess.getExpressionDeclarationAccess().getLeftSquareBracketKeyword_2_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getExpressionDeclarationAccess().getVarsVarParserRuleCall_2_1_0());
					}
					lv_vars_3_0=ruleVar
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getExpressionDeclarationRule());
						}
						add(
							$current,
							"vars",
							lv_vars_3_0,
							"hu.bme.mit.inf.ParametricTimedRegularExpression.Var");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_4=','
				{
					newLeafNode(otherlv_4, grammarAccess.getExpressionDeclarationAccess().getCommaKeyword_2_2_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getExpressionDeclarationAccess().getVarsVarParserRuleCall_2_2_1_0());
						}
						lv_vars_5_0=ruleVar
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getExpressionDeclarationRule());
							}
							add(
								$current,
								"vars",
								lv_vars_5_0,
								"hu.bme.mit.inf.ParametricTimedRegularExpression.Var");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
			otherlv_6=']'
			{
				newLeafNode(otherlv_6, grammarAccess.getExpressionDeclarationAccess().getRightSquareBracketKeyword_2_3());
			}
		)?
		otherlv_7='='
		{
			newLeafNode(otherlv_7, grammarAccess.getExpressionDeclarationAccess().getEqualsSignKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getExpressionDeclarationAccess().getBodyExpressionParserRuleCall_4_0());
				}
				lv_body_8_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getExpressionDeclarationRule());
					}
					set(
						$current,
						"body",
						lv_body_8_0,
						"hu.bme.mit.inf.ParametricTimedRegularExpression.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleExpression
entryRuleExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExpressionRule()); }
	iv_ruleExpression=ruleExpression
	{ $current=$iv_ruleExpression.current; }
	EOF;

// Rule Expression
ruleExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	{
		newCompositeNode(grammarAccess.getExpressionAccess().getAndParserRuleCall());
	}
	this_And_0=ruleAnd
	{
		$current = $this_And_0.current;
		afterParserOrEnumRuleCall();
	}
;

// Entry rule entryRuleAnd
entryRuleAnd returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAndRule()); }
	iv_ruleAnd=ruleAnd
	{ $current=$iv_ruleAnd.current; }
	EOF;

// Rule And
ruleAnd returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getAndAccess().getChoiceParserRuleCall_0());
		}
		this_Choice_0=ruleChoice
		{
			$current = $this_Choice_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndAdd(
						grammarAccess.getAndAccess().getAndElementsAction_1_0(),
						$current);
				}
			)
			(
				otherlv_2='&'
				{
					newLeafNode(otherlv_2, grammarAccess.getAndAccess().getAmpersandKeyword_1_1_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getAndAccess().getElementsChoiceParserRuleCall_1_1_1_0());
						}
						lv_elements_3_0=ruleChoice
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getAndRule());
							}
							add(
								$current,
								"elements",
								lv_elements_3_0,
								"hu.bme.mit.inf.ParametricTimedRegularExpression.Choice");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)+
		)?
	)
;

// Entry rule entryRuleChoice
entryRuleChoice returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getChoiceRule()); }
	iv_ruleChoice=ruleChoice
	{ $current=$iv_ruleChoice.current; }
	EOF;

// Rule Choice
ruleChoice returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getChoiceAccess().getSequenceParserRuleCall_0());
		}
		this_Sequence_0=ruleSequence
		{
			$current = $this_Sequence_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndAdd(
						grammarAccess.getChoiceAccess().getChoiceElementsAction_1_0(),
						$current);
				}
			)
			(
				otherlv_2='|'
				{
					newLeafNode(otherlv_2, grammarAccess.getChoiceAccess().getVerticalLineKeyword_1_1_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getChoiceAccess().getElementsSequenceParserRuleCall_1_1_1_0());
						}
						lv_elements_3_0=ruleSequence
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getChoiceRule());
							}
							add(
								$current,
								"elements",
								lv_elements_3_0,
								"hu.bme.mit.inf.ParametricTimedRegularExpression.Sequence");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)+
		)?
	)
;

// Entry rule entryRuleSequence
entryRuleSequence returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSequenceRule()); }
	iv_ruleSequence=ruleSequence
	{ $current=$iv_ruleSequence.current; }
	EOF;

// Rule Sequence
ruleSequence returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getSequenceAccess().getMultExpressionParserRuleCall_0());
		}
		this_MultExpression_0=ruleMultExpression
		{
			$current = $this_MultExpression_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndAdd(
						grammarAccess.getSequenceAccess().getSequenceElementsAction_1_0(),
						$current);
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getSequenceAccess().getElementsMultExpressionParserRuleCall_1_1_0());
					}
					lv_elements_2_0=ruleMultExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getSequenceRule());
						}
						add(
							$current,
							"elements",
							lv_elements_2_0,
							"hu.bme.mit.inf.ParametricTimedRegularExpression.MultExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)+
		)?
	)
;

// Entry rule entryRuleMultExpression
entryRuleMultExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMultExpressionRule()); }
	iv_ruleMultExpression=ruleMultExpression
	{ $current=$iv_ruleMultExpression.current; }
	EOF;

// Rule MultExpression
ruleMultExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getMultExpressionAccess().getParenExpressionParserRuleCall_0());
		}
		this_ParenExpression_0=ruleParenExpression
		{
			$current = $this_ParenExpression_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				(
					{
						$current = forceCreateModelElementAndSet(
							grammarAccess.getMultExpressionAccess().getStarBodyAction_1_0_0(),
							$current);
					}
				)
				otherlv_2='*'
				{
					newLeafNode(otherlv_2, grammarAccess.getMultExpressionAccess().getAsteriskKeyword_1_0_1());
				}
			)
			    |
			(
				(
					{
						$current = forceCreateModelElementAndSet(
							grammarAccess.getMultExpressionAccess().getPlusBodyAction_1_1_0(),
							$current);
					}
				)
				otherlv_4='+'
				{
					newLeafNode(otherlv_4, grammarAccess.getMultExpressionAccess().getPlusSignKeyword_1_1_1());
				}
			)
			    |
			(
				(
					{
						$current = forceCreateModelElementAndSet(
							grammarAccess.getMultExpressionAccess().getCardinalityBodyAction_1_2_0(),
							$current);
					}
				)
				otherlv_6='{'
				{
					newLeafNode(otherlv_6, grammarAccess.getMultExpressionAccess().getLeftCurlyBracketKeyword_1_2_1());
				}
				(
					(
						lv_n_7_0=RULE_INT
						{
							newLeafNode(lv_n_7_0, grammarAccess.getMultExpressionAccess().getNINTTerminalRuleCall_1_2_2_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getMultExpressionRule());
							}
							setWithLastConsumed(
								$current,
								"n",
								lv_n_7_0,
								"org.eclipse.xtext.common.Terminals.INT");
						}
					)
				)
				otherlv_8='}'
				{
					newLeafNode(otherlv_8, grammarAccess.getMultExpressionAccess().getRightCurlyBracketKeyword_1_2_3());
				}
			)
		)?
	)
;

// Entry rule entryRuleParenExpression
entryRuleParenExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getParenExpressionRule()); }
	iv_ruleParenExpression=ruleParenExpression
	{ $current=$iv_ruleParenExpression.current; }
	EOF;

// Rule ParenExpression
ruleParenExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			otherlv_0='('
			{
				newLeafNode(otherlv_0, grammarAccess.getParenExpressionAccess().getLeftParenthesisKeyword_0_0());
			}
			{
				newCompositeNode(grammarAccess.getParenExpressionAccess().getExpressionParserRuleCall_0_1());
			}
			this_Expression_1=ruleExpression
			{
				$current = $this_Expression_1.current;
				afterParserOrEnumRuleCall();
			}
			otherlv_2=')'
			{
				newLeafNode(otherlv_2, grammarAccess.getParenExpressionAccess().getRightParenthesisKeyword_0_2());
			}
		)
		    |
		{
			newCompositeNode(grammarAccess.getParenExpressionAccess().getAnyParserRuleCall_1());
		}
		this_Any_3=ruleAny
		{
			$current = $this_Any_3.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getParenExpressionAccess().getInverseParserRuleCall_2());
		}
		this_Inverse_4=ruleInverse
		{
			$current = $this_Inverse_4.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getParenExpressionAccess().getTimedExpressionParserRuleCall_3());
		}
		this_TimedExpression_5=ruleTimedExpression
		{
			$current = $this_TimedExpression_5.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getParenExpressionAccess().getEventParserRuleCall_4());
		}
		this_Event_6=ruleEvent
		{
			$current = $this_Event_6.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleAny
entryRuleAny returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAnyRule()); }
	iv_ruleAny=ruleAny
	{ $current=$iv_ruleAny.current; }
	EOF;

// Rule Any
ruleAny returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getAnyAccess().getAnyAction_0(),
					$current);
			}
		)
		otherlv_1='S'
		{
			newLeafNode(otherlv_1, grammarAccess.getAnyAccess().getSKeyword_1());
		}
	)
;

// Entry rule entryRuleInverse
entryRuleInverse returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getInverseRule()); }
	iv_ruleInverse=ruleInverse
	{ $current=$iv_ruleInverse.current; }
	EOF;

// Rule Inverse
ruleInverse returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='('
		{
			newLeafNode(otherlv_0, grammarAccess.getInverseAccess().getLeftParenthesisKeyword_0());
		}
		otherlv_1='S'
		{
			newLeafNode(otherlv_1, grammarAccess.getInverseAccess().getSKeyword_1());
		}
		otherlv_2='\\'
		{
			newLeafNode(otherlv_2, grammarAccess.getInverseAccess().getReverseSolidusKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getInverseAccess().getExcludesEventParserRuleCall_3_0());
				}
				lv_excludes_3_0=ruleEvent
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getInverseRule());
					}
					add(
						$current,
						"excludes",
						lv_excludes_3_0,
						"hu.bme.mit.inf.ParametricTimedRegularExpression.Event");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_4=','
			{
				newLeafNode(otherlv_4, grammarAccess.getInverseAccess().getCommaKeyword_4_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getInverseAccess().getExcludesEventParserRuleCall_4_1_0());
					}
					lv_excludes_5_0=ruleEvent
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getInverseRule());
						}
						add(
							$current,
							"excludes",
							lv_excludes_5_0,
							"hu.bme.mit.inf.ParametricTimedRegularExpression.Event");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		otherlv_6=')'
		{
			newLeafNode(otherlv_6, grammarAccess.getInverseAccess().getRightParenthesisKeyword_5());
		}
	)
;

// Entry rule entryRuleTimedExpression
entryRuleTimedExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTimedExpressionRule()); }
	iv_ruleTimedExpression=ruleTimedExpression
	{ $current=$iv_ruleTimedExpression.current; }
	EOF;

// Rule TimedExpression
ruleTimedExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='<'
		{
			newLeafNode(otherlv_0, grammarAccess.getTimedExpressionAccess().getLessThanSignKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getTimedExpressionAccess().getBodyExpressionParserRuleCall_1_0());
				}
				lv_body_1_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTimedExpressionRule());
					}
					set(
						$current,
						"body",
						lv_body_1_0,
						"hu.bme.mit.inf.ParametricTimedRegularExpression.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='>'
		{
			newLeafNode(otherlv_2, grammarAccess.getTimedExpressionAccess().getGreaterThanSignKeyword_2());
		}
		otherlv_3='['
		{
			newLeafNode(otherlv_3, grammarAccess.getTimedExpressionAccess().getLeftSquareBracketKeyword_3());
		}
		(
			(
				lv_timeout_4_0=RULE_INT
				{
					newLeafNode(lv_timeout_4_0, grammarAccess.getTimedExpressionAccess().getTimeoutINTTerminalRuleCall_4_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getTimedExpressionRule());
					}
					setWithLastConsumed(
						$current,
						"timeout",
						lv_timeout_4_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
		otherlv_5=']'
		{
			newLeafNode(otherlv_5, grammarAccess.getTimedExpressionAccess().getRightSquareBracketKeyword_5());
		}
	)
;

// Entry rule entryRuleEvent
entryRuleEvent returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEventRule()); }
	iv_ruleEvent=ruleEvent
	{ $current=$iv_ruleEvent.current; }
	EOF;

// Rule Event
ruleEvent returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getEventRule());
					}
				}
				otherlv_0=RULE_ID
				{
					newLeafNode(otherlv_0, grammarAccess.getEventAccess().getFunctorFunctorCrossReference_0_0());
				}
			)
		)
		(
			otherlv_1='['
			{
				newLeafNode(otherlv_1, grammarAccess.getEventAccess().getLeftSquareBracketKeyword_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getEventAccess().getParametersParameterParserRuleCall_1_1_0());
					}
					lv_parameters_2_0=ruleParameter
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getEventRule());
						}
						add(
							$current,
							"parameters",
							lv_parameters_2_0,
							"hu.bme.mit.inf.ParametricTimedRegularExpression.Parameter");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_3=','
				{
					newLeafNode(otherlv_3, grammarAccess.getEventAccess().getCommaKeyword_1_2_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getEventAccess().getParametersParameterParserRuleCall_1_2_1_0());
						}
						lv_parameters_4_0=ruleParameter
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getEventRule());
							}
							add(
								$current,
								"parameters",
								lv_parameters_4_0,
								"hu.bme.mit.inf.ParametricTimedRegularExpression.Parameter");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
			otherlv_5=']'
			{
				newLeafNode(otherlv_5, grammarAccess.getEventAccess().getRightSquareBracketKeyword_1_3());
			}
		)?
	)
;

// Entry rule entryRuleParameter
entryRuleParameter returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getParameterRule()); }
	iv_ruleParameter=ruleParameter
	{ $current=$iv_ruleParameter.current; }
	EOF;

// Rule Parameter
ruleParameter returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getParameterAccess().getVarParameterParserRuleCall_0());
		}
		this_VarParameter_0=ruleVarParameter
		{
			$current = $this_VarParameter_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getParameterAccess().getSingletonParameterParserRuleCall_1());
		}
		this_SingletonParameter_1=ruleSingletonParameter
		{
			$current = $this_SingletonParameter_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getParameterAccess().getFixParameterParserRuleCall_2());
		}
		this_FixParameter_2=ruleFixParameter
		{
			$current = $this_FixParameter_2.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleFixParameter
entryRuleFixParameter returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFixParameterRule()); }
	iv_ruleFixParameter=ruleFixParameter
	{ $current=$iv_ruleFixParameter.current; }
	EOF;

// Rule FixParameter
ruleFixParameter returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getFixParameterAccess().getFixIntParameterParserRuleCall_0());
		}
		this_FixIntParameter_0=ruleFixIntParameter
		{
			$current = $this_FixIntParameter_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getFixParameterAccess().getFixStringParameterParserRuleCall_1());
		}
		this_FixStringParameter_1=ruleFixStringParameter
		{
			$current = $this_FixStringParameter_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleFixIntParameter
entryRuleFixIntParameter returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFixIntParameterRule()); }
	iv_ruleFixIntParameter=ruleFixIntParameter
	{ $current=$iv_ruleFixIntParameter.current; }
	EOF;

// Rule FixIntParameter
ruleFixIntParameter returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_body_0_0=RULE_INT
			{
				newLeafNode(lv_body_0_0, grammarAccess.getFixIntParameterAccess().getBodyINTTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getFixIntParameterRule());
				}
				setWithLastConsumed(
					$current,
					"body",
					lv_body_0_0,
					"org.eclipse.xtext.common.Terminals.INT");
			}
		)
	)
;

// Entry rule entryRuleFixStringParameter
entryRuleFixStringParameter returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFixStringParameterRule()); }
	iv_ruleFixStringParameter=ruleFixStringParameter
	{ $current=$iv_ruleFixStringParameter.current; }
	EOF;

// Rule FixStringParameter
ruleFixStringParameter returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_body_0_0=RULE_STRING
			{
				newLeafNode(lv_body_0_0, grammarAccess.getFixStringParameterAccess().getBodySTRINGTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getFixStringParameterRule());
				}
				setWithLastConsumed(
					$current,
					"body",
					lv_body_0_0,
					"org.eclipse.xtext.common.Terminals.STRING");
			}
		)
	)
;

// Entry rule entryRuleVarParameter
entryRuleVarParameter returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVarParameterRule()); }
	iv_ruleVarParameter=ruleVarParameter
	{ $current=$iv_ruleVarParameter.current; }
	EOF;

// Rule VarParameter
ruleVarParameter returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getVarParameterRule());
				}
			}
			otherlv_0=RULE_ID
			{
				newLeafNode(otherlv_0, grammarAccess.getVarParameterAccess().getVarVarCrossReference_0());
			}
		)
	)
;

// Entry rule entryRuleSingletonParameter
entryRuleSingletonParameter returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSingletonParameterRule()); }
	iv_ruleSingletonParameter=ruleSingletonParameter
	{ $current=$iv_ruleSingletonParameter.current; }
	EOF;

// Rule SingletonParameter
ruleSingletonParameter returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getSingletonParameterAccess().getSingletonParameterAction_0(),
					$current);
			}
		)
		otherlv_1='_'
		{
			newLeafNode(otherlv_1, grammarAccess.getSingletonParameterAccess().get_Keyword_1());
		}
	)
;

// Entry rule entryRuleVar
entryRuleVar returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVarRule()); }
	iv_ruleVar=ruleVar
	{ $current=$iv_ruleVar.current; }
	EOF;

// Rule Var
ruleVar returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_name_0_0=RULE_ID
			{
				newLeafNode(lv_name_0_0, grammarAccess.getVarAccess().getNameIDTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getVarRule());
				}
				setWithLastConsumed(
					$current,
					"name",
					lv_name_0_0,
					"hu.bme.mit.inf.ParametricTimedRegularExpression.ID");
			}
		)
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
