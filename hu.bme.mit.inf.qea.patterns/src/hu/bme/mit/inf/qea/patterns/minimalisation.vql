package hu.bme.mit.inf.qea.patterns

import "http://www.example.org/EventAutomatonModel"

pattern notEquivalentStates(state1 : State, state2 : State) {
	state1 != state2;
	NotEquivalentRelation(relation);
	NotEquivalentRelation.states(relation, state1);
	NotEquivalentRelation.states(relation, state2);
}

pattern equivalentStates(state1 : State, state2 : State){
	neg find notEquivalentStates(state1, state2); // This warning is intentional
}

pattern outgoingNonEpsilonTransition(state : State, transition : Transition){
	Transition(transition);
	State.outgoingTransitions(state, transition);
}

pattern sameTriggerAction(trans1 : Transition, trans2 : Transition){
	Transition.eventguard.type(trans1, type);
	Transition.eventguard.type(trans2, type); 
}

pattern hasAction(trans : Transition, action : Action){
	Transition.actions(trans, action);
}

pattern notSameActions(trans1 : Transition, trans2 : Transition){
	find hasAction(trans1, action);
	neg find hasAction(trans2, action);
}

pattern sameActions(trans1 : Transition, trans2 : Transition){
	neg find notSameActions(trans1, trans2);
}

pattern incosistency(state1 : State, state2 : State){
	//Two states seems equivalent, but
	find equivalentStates(state1, state2);
	
	//They have a transition with the same trigger action
	find outgoingNonEpsilonTransition(state1, trans1);
	find outgoingNonEpsilonTransition(state2, trans2);
	find sameTriggerAction(trans1, trans2);
	
	//TODO With the same actions
	find sameActions(trans1, trans2);


	//But they are going to a nonequivalent state
	Transition.to(trans1, to1);
	Transition.to(trans2, to2);
	find notEquivalentStates(to1, to2);
	
}