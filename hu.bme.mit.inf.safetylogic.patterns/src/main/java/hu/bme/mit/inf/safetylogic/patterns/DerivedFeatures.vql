package hu.bme.mit.inf.safetylogic.patterns

import "http://hu.bme.mit.inf.safetylogic.railroadmodel"

@QueryBasedFeature(feature = "currentlyConnected")
pattern currentlyConnected(This : RailRoadElement, connectedTo : RailRoadElement) = {
	Segment(This);
	Segment.connectedTo(This, connectedTo);
} or {
	Turnout(This);
	Turnout.currentlyDivergent(This, true);
	Turnout.top(This, connectedTo);
	Turnout.divergent(This, connectedTo);
} or {
	Turnout(This);
	Turnout.currentlyDivergent(This, false);
	Turnout.top(This, connectedTo);
	Turnout.straight(This, connectedTo);
}

@QueryBasedFeature(feature = "connected")
pattern connected(This : RailRoadElement, connectedTo : RailRoadElement) = {
	Segment(This);
	Segment.connectedTo(This, connectedTo);
} or {
	Turnout(This);
	Turnout.top(This, connectedTo);
	Turnout.divergent(This, connectedTo);
	Turnout.straight(This, connectedTo);
}

@QueryBasedFeature(feature = "viablePaths")
pattern viablePaths(This : RailRoadElement, path : Path) = {
	Segment(This);
	Segment.connectedTo(This, connectedOnes);
	
	Path.via(path, This);
	Path.from(path, connectedOnes);
	Path.to(path, connectedOnes);
} or {
	Turnout(This);
	Turnout.currentlyDivergent(This, true);
	
	Turnout.top(This, top);
	Turnout.divergent(This, divergent);
	Path.via(path, This);
	Path.to(path, divergent);
	Path.from(path, top);
} or {
	Turnout(This);
	Turnout.currentlyDivergent(This, true);
	
	Turnout.top(This, top);
	Turnout.divergent(This, divergent);
	
	Path.via(path, This);
	Path.to(path, top);
	Path.from(path, divergent);
} or {
	Turnout(This);
	Turnout.currentlyDivergent(This, false);

	Turnout.top(This, top);
	Turnout.straight(This, straight);
	Path.via(path, This);
	Path.to(path, straight);
	Path.from(path, top);

} or {
	Turnout(This);
	Turnout.currentlyDivergent(This, false);

	Turnout.top(This, top);
	Turnout.straight(This, straight);
	Path.via(path, This);
	Path.to(path, top);
	Path.from(path, straight);
}