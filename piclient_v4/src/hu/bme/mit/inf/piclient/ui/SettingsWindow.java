/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package hu.bme.mit.inf.piclient.ui;

import java.awt.Color;
import java.io.IOException;
import java.util.concurrent.ConcurrentMap;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JColorChooser;
import javax.swing.JOptionPane;
import hu.bme.mit.inf.kvcontrol.CommandServer;
import hu.bme.mit.inf.kvcontrol.controllers.OccupancyController;
import hu.bme.mit.inf.kvcontrol.controllers.SectionController;
import hu.bme.mit.inf.kvcontrol.controllers.TurnoutController;
import hu.bme.mit.inf.kvcontrol.entities.Section;
import hu.bme.mit.inf.kvcontrol.exceptions.NotFoundException;
import hu.bme.mit.inf.kvcontrol.interfaces.IController;
import hu.bme.mit.inf.kvcontrol.interfaces.IOccupancyController;
import hu.bme.mit.inf.kvcontrol.interfaces.ISectionController;
import hu.bme.mit.inf.kvcontrol.interfaces.ITurnoutController;
import hu.bme.mit.inf.kvcontrol.requests.AbstractRequest;
import hu.bme.mit.inf.kvcontrol.senders.OccupancyRequestSender;
import hu.bme.mit.inf.kvcontrol.senders.SectionStateRequestSender;
import hu.bme.mit.inf.kvcontrol.senders.TurnoutDirectionRequestSender;
import hu.bme.mit.inf.piclient.Application;

/**
 *
 * @author zsoltmazlo
 */
public class SettingsWindow extends javax.swing.JFrame {

    public static String TURNOUT_ACTIVE_BRANCH_COLOR = "000000";
    public static String TURNOUT_DEACTIVE_BRANCH_COLOR = "a8a8a8";
//    public static String SECTION_DISABLED_COLOR = "DD0000";
//    public static String SECTION_ENABLED_COLOR = "669900";
    public static String SECTION_DISABLED_COLOR = "FF0000";
    public static String SECTION_ENABLED_COLOR = "00CC00";
    public static String OCCUPANCY_BACKGROUND = "000000";

    public static ITurnoutController turnoutController;
    public static IOccupancyController occupancyController;
    public static ISectionController sectionController;
    
    private static final String REMOTE_SERVER_ADDRESS_PREFIX = "http://";

    private static final HeartBeatRunnable heartBeats = new HeartBeatRunnable(new Object());

    private enum ConnectionType {

        RemoteServer,
        LocalServer,
        Library
    };

    public static class Configuration {

        // kiszolgáló server címe
        public static String address;

        // kiszolgáló server port-ja
        public static int port;

        //  local szerver esetén mennyi lesz a timeout
        public static int heartbeatTimeout = 800;

        public static ConnectionType connectionType;
    }

    public static CommandServer server;

    /**
     * Creates new form Settings
     */
    public SettingsWindow() {
        initComponents();
        getContentPane().setBackground(Application.pageBackground);
        Configuration.connectionType = ConnectionType.RemoteServer;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel4 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        turnoutStatusPolling = new javax.swing.JCheckBox();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        turnoutActiveBranchColor = new javax.swing.JPanel();
        turnoutDeactiveBranchColor = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        sectionStatusPolling = new javax.swing.JCheckBox();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        lockedSectionColor = new javax.swing.JPanel();
        unlockedSectionColor = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        occupancyStatusPolling = new javax.swing.JCheckBox();
        jLabel8 = new javax.swing.JLabel();
        locoObjectBackground = new javax.swing.JPanel();
        pauseHeartBeat = new javax.swing.JButton();
        startHeartBeat = new javax.swing.JButton();
        jSlider1 = new javax.swing.JSlider();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        pollingInterval = new javax.swing.JLabel();
        jPanel6 = new javax.swing.JPanel();
        remoteServer = new javax.swing.JRadioButton();
        remoteServerIP = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        remoteServerPortField = new javax.swing.JTextField();
        localServer = new javax.swing.JRadioButton();
        jLabel13 = new javax.swing.JLabel();
        localPort = new javax.swing.JTextField();
        localConnectDirectly = new javax.swing.JCheckBox();
        directServer = new javax.swing.JRadioButton();

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setAlwaysOnTop(true);
        setBackground(Application.pageBackground);
        setMinimumSize(new java.awt.Dimension(360, 650));

        jPanel1.setBackground(Application.pageBackground);
        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Turnouts", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, Application.titleFont, Application.titleForeground));
        jPanel1.setForeground(new java.awt.Color(255, 255, 255));

        jLabel1.setBackground(new java.awt.Color(0, 0, 54));
        jLabel1.setFont(new java.awt.Font("Ubuntu Light", 0, 14)); // NOI18N
        jLabel1.setForeground(Application.labelForeground);
        jLabel1.setText("status polling");

        turnoutStatusPolling.setBackground(Application.pageBackground);
        turnoutStatusPolling.setSelected(true);
        turnoutStatusPolling.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                turnoutStatusPollingStateChanged(evt);
            }
        });

        jLabel2.setBackground(new java.awt.Color(0, 0, 54));
        jLabel2.setFont(new java.awt.Font("Ubuntu Light", 0, 14)); // NOI18N
        jLabel2.setForeground(Application.labelForeground);
        jLabel2.setText("turnout switched branch's color");

        jLabel3.setBackground(new java.awt.Color(0, 0, 54));
        jLabel3.setFont(new java.awt.Font("Ubuntu Light", 0, 14)); // NOI18N
        jLabel3.setForeground(Application.labelForeground);
        jLabel3.setText("turnout abonded branch's color");

        turnoutActiveBranchColor.setBackground(Color.decode("0x"+SettingsWindow.TURNOUT_ACTIVE_BRANCH_COLOR));
        turnoutActiveBranchColor.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                turnoutActiveBranchColorMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout turnoutActiveBranchColorLayout = new javax.swing.GroupLayout(turnoutActiveBranchColor);
        turnoutActiveBranchColor.setLayout(turnoutActiveBranchColorLayout);
        turnoutActiveBranchColorLayout.setHorizontalGroup(
            turnoutActiveBranchColorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        turnoutActiveBranchColorLayout.setVerticalGroup(
            turnoutActiveBranchColorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        turnoutDeactiveBranchColor.setBackground(Color.decode("0x"+TURNOUT_DEACTIVE_BRANCH_COLOR));
        turnoutDeactiveBranchColor.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                turnoutDeactiveBranchColorMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout turnoutDeactiveBranchColorLayout = new javax.swing.GroupLayout(turnoutDeactiveBranchColor);
        turnoutDeactiveBranchColor.setLayout(turnoutDeactiveBranchColorLayout);
        turnoutDeactiveBranchColorLayout.setHorizontalGroup(
            turnoutDeactiveBranchColorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        turnoutDeactiveBranchColorLayout.setVerticalGroup(
            turnoutDeactiveBranchColorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(turnoutActiveBranchColor, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(turnoutStatusPolling, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(turnoutDeactiveBranchColor, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(turnoutStatusPolling)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(turnoutActiveBranchColor, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(turnoutDeactiveBranchColor, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(0, 12, Short.MAX_VALUE))
        );

        jPanel2.setBackground(Application.pageBackground);
        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Sections", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, Application.titleFont, Application.titleForeground));

        jLabel4.setFont(new java.awt.Font("Ubuntu Light", 0, 14)); // NOI18N
        jLabel4.setForeground(Application.labelForeground);
        jLabel4.setText("status polling");

        sectionStatusPolling.setBackground(Application.pageBackground);
        sectionStatusPolling.setSelected(true);
        sectionStatusPolling.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                sectionStatusPollingMouseClicked(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Ubuntu Light", 0, 14)); // NOI18N
        jLabel5.setForeground(Application.labelForeground);
        jLabel5.setText("locked section's color");

        jLabel6.setFont(new java.awt.Font("Ubuntu Light", 0, 14)); // NOI18N
        jLabel6.setForeground(Application.labelForeground);
        jLabel6.setText("unlocked section's color");

        lockedSectionColor.setBackground(Color.decode("0x"+SettingsWindow.SECTION_DISABLED_COLOR));
        lockedSectionColor.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lockedSectionColorMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout lockedSectionColorLayout = new javax.swing.GroupLayout(lockedSectionColor);
        lockedSectionColor.setLayout(lockedSectionColorLayout);
        lockedSectionColorLayout.setHorizontalGroup(
            lockedSectionColorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        lockedSectionColorLayout.setVerticalGroup(
            lockedSectionColorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        unlockedSectionColor.setBackground(Color.decode("0x"+SECTION_ENABLED_COLOR));
        unlockedSectionColor.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                unlockedSectionColorMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout unlockedSectionColorLayout = new javax.swing.GroupLayout(unlockedSectionColor);
        unlockedSectionColor.setLayout(unlockedSectionColorLayout);
        unlockedSectionColorLayout.setHorizontalGroup(
            unlockedSectionColorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        unlockedSectionColorLayout.setVerticalGroup(
            unlockedSectionColorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 15, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4)
                    .addComponent(jLabel5)
                    .addComponent(jLabel6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(lockedSectionColor, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(sectionStatusPolling, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(unlockedSectionColor, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(sectionStatusPolling)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(lockedSectionColor, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(unlockedSectionColor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 12, Short.MAX_VALUE))
        );

        jPanel3.setBackground(Application.pageBackground);
        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Locomotives", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, Application.titleFont, Application.titleForeground));
        jPanel3.setForeground(Application.labelForeground);

        jLabel7.setFont(new java.awt.Font("Ubuntu Light", 0, 14)); // NOI18N
        jLabel7.setForeground(Application.labelForeground);
        jLabel7.setText("status polling");

        occupancyStatusPolling.setBackground(Application.pageBackground);
        occupancyStatusPolling.setSelected(true);
        occupancyStatusPolling.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                occupancyStatusPollingMouseClicked(evt);
            }
        });

        jLabel8.setFont(new java.awt.Font("Ubuntu Light", 0, 14)); // NOI18N
        jLabel8.setForeground(Application.labelForeground);
        jLabel8.setText("feedback element's background");

        locoObjectBackground.setBackground(Color.decode("0x"+SettingsWindow.OCCUPANCY_BACKGROUND));
        locoObjectBackground.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                locoObjectBackgroundMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout locoObjectBackgroundLayout = new javax.swing.GroupLayout(locoObjectBackground);
        locoObjectBackground.setLayout(locoObjectBackgroundLayout);
        locoObjectBackgroundLayout.setHorizontalGroup(
            locoObjectBackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        locoObjectBackgroundLayout.setVerticalGroup(
            locoObjectBackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel7)
                    .addComponent(jLabel8))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(locoObjectBackground, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(occupancyStatusPolling, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(occupancyStatusPolling)
                    .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(locoObjectBackground, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pauseHeartBeat.setBackground(Application.buttonBackground);
        pauseHeartBeat.setFont(Application.buttonFont);
        pauseHeartBeat.setIcon(Application.getIcon(Application.SettingsWindow_pauseButton, getClass())
        );
        pauseHeartBeat.setBorder(Application.buttonBorder);
        pauseHeartBeat.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                pauseHeartBeatMouseClicked(evt);
            }
        });

        startHeartBeat.setBackground(Application.buttonBackground);
        startHeartBeat.setFont(Application.buttonFont);
        startHeartBeat.setIcon(Application.getIcon(Application.SettingsWindow_playButton, getClass()));
        startHeartBeat.setBorder(Application.buttonBorder);
        startHeartBeat.setMargin(Application.buttonInsets);
        startHeartBeat.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                startHeartBeatMouseClicked(evt);
            }
        });

        jSlider1.setBackground(Application.pageBackground);
        jSlider1.setFont(Application.labelFont);
        jSlider1.setForeground(Application.sliderForeground);
        jSlider1.setMajorTickSpacing(50);
        jSlider1.setMaximum(1500);
        jSlider1.setMinimum(300);
        jSlider1.setMinorTickSpacing(50);
        jSlider1.setPaintTicks(true);
        jSlider1.setSnapToTicks(true);
        jSlider1.setToolTipText("");
        jSlider1.setValue(900);
        jSlider1.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSlider1StateChanged(evt);
            }
        });

        jLabel9.setFont(Application.labelFont);
        jLabel9.setForeground(Application.labelForeground);
        jLabel9.setText("300");

        jLabel10.setFont(Application.labelFont);
        jLabel10.setForeground(Application.labelForeground);
        jLabel10.setText("1500");

        pollingInterval.setFont(Application.labelFont);
        pollingInterval.setForeground(Application.labelForeground);
        pollingInterval.setText("800ms");

        jPanel6.setBackground(Application.pageBackground);
        jPanel6.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Connection", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, Application.titleFont, Application.titleForeground));
        jPanel6.setForeground(new java.awt.Color(255, 255, 255));

        remoteServer.setBackground(Application.pageBackground);
        remoteServer.setFont(new java.awt.Font("Ubuntu Light", 0, 14)); // NOI18N
        remoteServer.setForeground(Application.labelForeground);
        remoteServer.setSelected(true);
        remoteServer.setText("Connect to remote server");
        remoteServer.setToolTipText("Connects to a remote control server, and sending REST calls over HTTP.");
        remoteServer.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                remoteServerStateChanged(evt);
            }
        });

        jLabel11.setBackground(Application.pageBackground);
        jLabel11.setFont(new java.awt.Font("Ubuntu Light", 0, 14)); // NOI18N
        jLabel11.setForeground(Application.labelForeground);
        jLabel11.setText("Server:");

        jLabel12.setBackground(Application.pageBackground);
        jLabel12.setFont(new java.awt.Font("Ubuntu Light", 0, 14)); // NOI18N
        jLabel12.setForeground(Application.labelForeground);
        jLabel12.setText("Port:");

        remoteServerPortField.setText("8080");
        remoteServerPortField.setToolTipText("");

        localServer.setBackground(Application.pageBackground);
        localServer.setFont(new java.awt.Font("Ubuntu Light", 0, 14)); // NOI18N
        localServer.setForeground(Application.labelForeground);
        localServer.setText("Create local server");
        localServer.setToolTipText("Creates an local server to receive REST calls.");
        localServer.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                localServerStateChanged(evt);
            }
        });

        jLabel13.setBackground(Application.pageBackground);
        jLabel13.setFont(new java.awt.Font("Ubuntu Light", 0, 14)); // NOI18N
        jLabel13.setForeground(Application.labelForeground);
        jLabel13.setText("Port:");

        localPort.setText("8080");
        localPort.setEnabled(false);

        localConnectDirectly.setBackground(Application.pageBackground);
        localConnectDirectly.setFont(new java.awt.Font("Ubuntu Light", 0, 14)); // NOI18N
        localConnectDirectly.setForeground(Application.labelForeground);
        localConnectDirectly.setSelected(true);
        localConnectDirectly.setText("Connect directly:");
        localConnectDirectly.setToolTipText("When local server created, all client could connect to with REST calls. If this checked, the piClient will not send REST calls rather calling directly the server's functionallity.");
        localConnectDirectly.setEnabled(false);
        localConnectDirectly.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        localConnectDirectly.setMargin(new java.awt.Insets(0, 0, 0, 0));

        directServer.setBackground(Application.pageBackground);
        directServer.setFont(new java.awt.Font("Ubuntu Light", 0, 14)); // NOI18N
        directServer.setForeground(Application.labelForeground);
        directServer.setText("Direct connection");
        directServer.setToolTipText("Uses the control library directly.");
        directServer.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                directServerStateChanged(evt);
            }
        });

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(remoteServer)
                            .addComponent(directServer)
                            .addComponent(localServer))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel6Layout.createSequentialGroup()
                                .addComponent(jLabel11)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(remoteServerIP)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel12)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(remoteServerPortField, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel6Layout.createSequentialGroup()
                                .addComponent(jLabel13)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(localPort, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(localConnectDirectly)))))
                .addContainerGap())
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(remoteServer)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(remoteServerIP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel12)
                    .addComponent(remoteServerPortField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(localServer)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel13)
                    .addComponent(localPort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(localConnectDirectly))
                .addGap(10, 10, 10)
                .addComponent(directServer))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(pauseHeartBeat)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(startHeartBeat))
                    .addComponent(jSlider1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel9)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(pollingInterval)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel10))
                    .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSlider1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(jLabel10)
                    .addComponent(pollingInterval))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(pauseHeartBeat, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(startHeartBeat, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void turnoutActiveBranchColorMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_turnoutActiveBranchColorMouseClicked
        Color prevColor = Color.decode("0x" + TURNOUT_ACTIVE_BRANCH_COLOR);
        Color newColor = JColorChooser.showDialog(null, "Pick a color", prevColor);
        if (newColor != null) {
            turnoutActiveBranchColor.setBackground(newColor);
            int rgb = newColor.getRGB();
            TURNOUT_ACTIVE_BRANCH_COLOR = String.format("%06X", rgb).substring(2);
        }
    }//GEN-LAST:event_turnoutActiveBranchColorMouseClicked

    private void turnoutDeactiveBranchColorMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_turnoutDeactiveBranchColorMouseClicked
        Color prevColor = Color.decode("0x" + TURNOUT_DEACTIVE_BRANCH_COLOR);
        Color newColor = JColorChooser.showDialog(null, "Pick a color", prevColor);
        if (newColor != null) {
            turnoutDeactiveBranchColor.setBackground(newColor);
            int rgb = newColor.getRGB();
            TURNOUT_DEACTIVE_BRANCH_COLOR = String.format("%06X", rgb).substring(2);
        }
    }//GEN-LAST:event_turnoutDeactiveBranchColorMouseClicked

    private void lockedSectionColorMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lockedSectionColorMouseClicked
        Color prevColor = Color.decode("0x" + SECTION_DISABLED_COLOR);
        Color newColor = JColorChooser.showDialog(null, "Pick a color", prevColor);
        if (newColor != null) {
            lockedSectionColor.setBackground(newColor);
            int rgb = newColor.getRGB();
            SECTION_DISABLED_COLOR = String.format("%06X", rgb).substring(2);
        }
    }//GEN-LAST:event_lockedSectionColorMouseClicked

    private void unlockedSectionColorMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_unlockedSectionColorMouseClicked
        Color prevColor = Color.decode("0x" + SECTION_ENABLED_COLOR);
        Color newColor = JColorChooser.showDialog(null, "Pick a color", prevColor);
        if (newColor != null) {
            unlockedSectionColor.setBackground(newColor);
            int rgb = newColor.getRGB();
            SECTION_ENABLED_COLOR = String.format("%06X", rgb).substring(2);
        }
    }//GEN-LAST:event_unlockedSectionColorMouseClicked

    private void locoObjectBackgroundMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_locoObjectBackgroundMouseClicked
        Color prevColor = Color.decode("0x" + OCCUPANCY_BACKGROUND);
        Color newColor = JColorChooser.showDialog(null, "Pick a color", prevColor);
        if (newColor != null) {
            locoObjectBackground.setBackground(newColor);
            int rgb = newColor.getRGB();
            OCCUPANCY_BACKGROUND = String.format("%06X", rgb).substring(2);
        }
    }//GEN-LAST:event_locoObjectBackgroundMouseClicked

    private void jSlider1StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSlider1StateChanged
        int newValue = jSlider1.getValue();
        this.pollingInterval.setText(newValue + "ms");
        if (!jSlider1.getValueIsAdjusting()) {
            Configuration.heartbeatTimeout = newValue;
            SettingsWindow.heartBeats.setPollingInterval(newValue);
        }
    }//GEN-LAST:event_jSlider1StateChanged

    private void pauseHeartBeatMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_pauseHeartBeatMouseClicked
        SettingsWindow.heartBeats.pause();
    }//GEN-LAST:event_pauseHeartBeatMouseClicked

    private void startHeartBeatMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_startHeartBeatMouseClicked

        switch (Configuration.connectionType) {
            case LocalServer:
                try {
                    Configuration.port = Integer.parseInt(this.localPort.getText());
                    RailwayWindow.log("Creating local server on port: " + String.valueOf(Configuration.port));

                    // server indítása új thead-en
                    if (server == null) {
                        server = new CommandServer(Configuration.port, Configuration.heartbeatTimeout);
                        new Thread(new Runnable() {

                            @Override
                            public void run() {
                                server.start();
                            }
                        }).start();
                    }


                    // local esetén be kell állítani a kapott címet az abstractRequest-nek!
                    AbstractRequest.setDefaultPort(Configuration.port);
                    AbstractRequest.setDefultAddress("http://localhost");

                    // proxy objektumok generálása
                    if (turnoutStatusPolling.isSelected()) {
                        // ha be van pippantva, akkor nem http kéréseket küldünk,
                        // hanem direktben kérdezzük az adatokat
                        if (localConnectDirectly.isSelected()) {
                            turnoutController = server.turnoutController;
                        } else {
                            turnoutController = new TurnoutControllerProxy();
                        }
                    }

                    if (sectionStatusPolling.isSelected()) {
                        // ha be van pippantva, akkor nem http kéréseket küldünk,
                        // hanem direktben kérdezzük az adatokat
                        if (localConnectDirectly.isSelected()) {
                            sectionController = server.sectionController;
                        } else {
                            sectionController = new SectionControllerProxy();
                        }
                    }

                    if (occupancyStatusPolling.isSelected()) {
                        // ha be van pippantva, akkor nem http kéréseket küldünk,
                        // hanem direktben kérdezzük az adatokat
                        if (localConnectDirectly.isSelected()) {
                            occupancyController = server.occupancyController;
                        } else {
                            occupancyController = new OccupancyControllerProxy();
                        }
                    }
                    
                    new Thread(heartBeats).start();

                } catch (NumberFormatException e) {
                    JOptionPane.showMessageDialog(this, "Wrong number given as localport!");
                    return;
                }
                break;

            case RemoteServer:
                try {
                    Configuration.address = REMOTE_SERVER_ADDRESS_PREFIX + this.remoteServerIP.getText();
                    Configuration.port = Integer.parseInt(this.remoteServerPortField.getText());
                    RailwayWindow.log("Connecting to Remote server: "
                            + Configuration.address + ":"
                            + String.valueOf(Configuration.port));

                    // remote esetén be kell állítani a kapott címet az abstractRequest-nek!
                    AbstractRequest.setDefaultPort(Configuration.port);
                    AbstractRequest.setDefultAddress(Configuration.address);

                    // proxy objektumok generálása
                    if (turnoutStatusPolling.isSelected()) {
                        turnoutController = new TurnoutControllerProxy();
                    }

                    if (sectionStatusPolling.isSelected()) {
                        sectionController = new SectionControllerProxy();
                    }

                    if (occupancyStatusPolling.isSelected()) {
                        occupancyController = new OccupancyControllerProxy();
                    }
                    
                    new Thread(heartBeats).start();

                } catch (NumberFormatException e) {
                    return;
                }
                break;

            case Library:
                RailwayWindow.log("Connecting using library");
                if (turnoutStatusPolling.isSelected()) {
                    SettingsWindow.turnoutController = new TurnoutController();
                    turnoutController.startThreads();
                }

                if (sectionStatusPolling.isSelected()) {
                    SettingsWindow.sectionController = new SectionController();
                    sectionController.startThreads();
                }

                if (occupancyStatusPolling.isSelected()) {
                    SettingsWindow.occupancyController = new OccupancyController();
                    occupancyController.startThreads();
                }
                new Thread(heartBeats).start();
                break;
        }

        dispose();
    }//GEN-LAST:event_startHeartBeatMouseClicked

    private void turnoutStatusPollingStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_turnoutStatusPollingStateChanged
        SettingsWindow.heartBeats.setTurnoutPollingEnabled(turnoutStatusPolling.isSelected());
    }//GEN-LAST:event_turnoutStatusPollingStateChanged

    private void occupancyStatusPollingMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_occupancyStatusPollingMouseClicked
        SettingsWindow.heartBeats.setOccupancyPollingEnabled(occupancyStatusPolling.isSelected());
    }//GEN-LAST:event_occupancyStatusPollingMouseClicked

    private void sectionStatusPollingMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_sectionStatusPollingMouseClicked
        SettingsWindow.heartBeats.setSectionPollingEnabled(sectionStatusPolling.isSelected());
    }//GEN-LAST:event_sectionStatusPollingMouseClicked

    private void directServerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_directServerStateChanged
        if (this.directServer.isSelected()) {
            Configuration.connectionType = ConnectionType.Library;
            this.remoteServer.setSelected(false);
            this.localServer.setSelected(false);
        }
    }//GEN-LAST:event_directServerStateChanged

    private void localServerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_localServerStateChanged
        if (localServer.isSelected()) {
            Configuration.connectionType = ConnectionType.LocalServer;
            this.remoteServer.setSelected(false);
            this.directServer.setSelected(false);
            this.localConnectDirectly.setEnabled(true);
            this.localPort.setEnabled(true);
        } else {
            this.localConnectDirectly.setEnabled(false);
            this.localPort.setEnabled(false);
        }
    }//GEN-LAST:event_localServerStateChanged

    private void remoteServerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_remoteServerStateChanged
        if (remoteServer.isSelected()) {
            Configuration.connectionType = ConnectionType.RemoteServer;
            this.localServer.setSelected(false);
            this.directServer.setSelected(false);
            this.remoteServerIP.setEnabled(true);
            this.remoteServerPortField.setEnabled(true);
        } else {
            this.remoteServerIP.setEnabled(false);
            this.remoteServerPortField.setEnabled(false);
        }
    }//GEN-LAST:event_remoteServerStateChanged

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButton directServer;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JSlider jSlider1;
    private javax.swing.JCheckBox localConnectDirectly;
    private javax.swing.JTextField localPort;
    private javax.swing.JRadioButton localServer;
    private javax.swing.JPanel lockedSectionColor;
    private javax.swing.JPanel locoObjectBackground;
    private javax.swing.JCheckBox occupancyStatusPolling;
    private javax.swing.JButton pauseHeartBeat;
    private javax.swing.JLabel pollingInterval;
    private javax.swing.JRadioButton remoteServer;
    private javax.swing.JTextField remoteServerIP;
    private javax.swing.JTextField remoteServerPortField;
    private javax.swing.JCheckBox sectionStatusPolling;
    private javax.swing.JButton startHeartBeat;
    private javax.swing.JPanel turnoutActiveBranchColor;
    private javax.swing.JPanel turnoutDeactiveBranchColor;
    private javax.swing.JCheckBox turnoutStatusPolling;
    private javax.swing.JPanel unlockedSectionColor;
    // End of variables declaration//GEN-END:variables

    private static class HeartBeatRunnable extends IController.RunnableStub {

        private boolean sectionPollingEnabled = true;
        private boolean turnoutPollingEnabled = true;
        private boolean occupancyPollingEnabled = true;
        private int pollingInterval = 800;
        private volatile boolean isRunning = true;

        public HeartBeatRunnable(Object synObject) {
            super(synObject);
        }

        private volatile boolean isPaused = false;

        @Override
        public void run() {
            while (isRunning) {

                if (isPaused) {
                    try {
                        synchronized (this.heartBeat) {
                            this.heartBeat.wait();
                        }
                    } catch (InterruptedException ex) {
                        Logger.getLogger(SettingsWindow.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }

                try {
                    if (this.isTurnoutPollingEnabled()) {
                        SettingsWindow.turnoutController.sendHeartBeat();
                    }
                    Thread.sleep(100);

                    if (this.isOccupancyPollingEnabled()) {
                        SettingsWindow.occupancyController.sendHeartBeat();
                    }
                    Thread.sleep(100);

                    if (this.isSectionPollingEnabled()) {
                        SettingsWindow.sectionController.sendHeartBeat();
                    }
                    Thread.sleep(pollingInterval - 200);
                } catch (InterruptedException ex) {
                    Logger.getLogger(SettingsWindow.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }

        public void pause() {
            this.isPaused = true;
        }

        public void start() {
            this.isPaused = false;
            synchronized (this.heartBeat) {
                this.heartBeat.notify();
            }
        }

        /**
         * @return the sectionPollingEnabled
         */
        public boolean isSectionPollingEnabled() {
            return sectionPollingEnabled;
        }

        /**
         * @param sectionPollingEnabled the sectionPollingEnabled to set
         */
        public void setSectionPollingEnabled(boolean sectionPollingEnabled) {
            this.sectionPollingEnabled = sectionPollingEnabled;
        }

        /**
         * @return the turnoutPollingEnabled
         */
        public boolean isTurnoutPollingEnabled() {
            return turnoutPollingEnabled;
        }

        /**
         * @param turnoutPollingEnabled the turnoutPollingEnabled to set
         */
        public void setTurnoutPollingEnabled(boolean turnoutPollingEnabled) {
            this.turnoutPollingEnabled = turnoutPollingEnabled;
        }

        /**
         * @return the occupancyPollingEnabled
         */
        public boolean isOccupancyPollingEnabled() {
            return occupancyPollingEnabled;
        }

        /**
         * @param occupancyPollingEnabled the occupancyPollingEnabled to set
         */
        public void setOccupancyPollingEnabled(boolean occupancyPollingEnabled) {
            this.occupancyPollingEnabled = occupancyPollingEnabled;
        }

        /**
         * @return the pollingInterval
         */
        public int getPollingInterval() {
            return pollingInterval;
        }

        /**
         * @param pollingInterval the pollingInterval to set
         */
        public void setPollingInterval(int pollingInterval) {
            this.pollingInterval = pollingInterval;
        }
    }

    private static final class OccupancyControllerProxy implements IOccupancyController {

        private volatile int occupancyVector;

        private final OccupancyController.OccupancyProcessor processor;
        private long lastRefresh;

        public OccupancyControllerProxy() {
            processor = new OccupancyController.OccupancyProcessor();
            this.getOccupancyVector();
        }

        @Override
        public boolean isSectionOccupied(int sectionId) throws NotFoundException {
            // a configuration-ban megadott időnként kell csak frissíteni a vectort!
            if (lastRefresh + Configuration.heartbeatTimeout < System.currentTimeMillis()) {
                // egyébként újra kell kérni az adatokat
                getOccupancyVector();
            }
            return processor.isSectionOccupied(sectionId);
        }

        @Override
        public int getOccupancyVector() {
            occupancyVector = new OccupancyRequestSender().getOccupancyVector();
            processor.refreshOccupancies(occupancyVector);
            this.lastRefresh = System.currentTimeMillis();
            return occupancyVector;
        }

        @Override
        public void sendTCPPacket(int i, byte[] bytes) throws IOException {
            // üres, ilyet nem fogunk kérni
        }

        @Override
        public void sendHeartBeat() {
            if (lastRefresh + Configuration.heartbeatTimeout < System.currentTimeMillis()) {
                processor.refreshOccupancies(getOccupancyVector());
            }
        }

        @Override
        public void startThreads() {
            // threadet meg főleg nem fogunk indítani
        }
    }

    private static class SectionControllerProxy implements ISectionController {

        @Override
        public void setSectionEnabled(int sectionId) throws NotFoundException {
            new SectionStateRequestSender().enableSection(sectionId);
        }

        @Override
        public void setSectionDisabled(int sectionId) throws NotFoundException {
            new SectionStateRequestSender().disableSection(sectionId);
        }

        @Override
        public boolean isSectionEnabled(int sectionId) throws NotFoundException {
            return new SectionStateRequestSender().isSectionEnabled(sectionId);
        }

        @Override
        public void sendTCPPacket(int i, byte[] bytes) throws IOException {
            // üres, ilyet nem fogunk kérni
        }

        @Override
        public void sendHeartBeat() {
            ConcurrentMap<String, Section> sections = Application.sections;
            for(Section section: sections.values()){
                boolean sectionEnabled = new SectionStateRequestSender().isSectionEnabled(section.getID());
                section.setIsEnabled(sectionEnabled);
            }
        }

        @Override
        public void startThreads() {
            // threadet meg főleg nem fogunk indítani
        }

    }

    private static class TurnoutControllerProxy implements ITurnoutController {

        @Override
        public boolean isTurnoutDivergent(int turnoutId) throws NotFoundException {
            return new TurnoutDirectionRequestSender().isTurnoutDivergent(turnoutId);
        }

        @Override
        public boolean isTurnoutStraight(int turnoutId) throws NotFoundException {
            return !(new TurnoutDirectionRequestSender().isTurnoutDivergent(turnoutId));
        }

        @Override
        public void sendTCPPacket(int i, byte[] bytes) throws IOException {
            // üres, ilyet nem fogunk kérni
        }

        @Override
        public void sendHeartBeat() {
            
            // remote esetén sem fogunk kérni heartbeat-et
        }

        @Override
        public void startThreads() {
            // threadet meg főleg nem fogunk indítani
        }

    }

}
