section sectionComponent {
	interface {
		reserveFromLeft : IN reserveFromLeft
		reserveFromRight : IN reserveFromRight
		// Ez az üzenet vagy a jobb vagy a bal oldali section-ről jön, és azt jelzi, hogy sikerült-e a lefoglalás (aurába betétel), egy boolean változóban jelzi
		reserveResult : IN reserveResult
		// Ez az üzenet jelzi, hogy a vonat elment a mellette lévő section-ről, így ez a section kikerült az aurából
		release : IN release
		// Ezzel az üzenettel kell jelezni a section-nek, hogy a vonat ténylegesen, fizikailag ráment
		occupy : IN occupy
		// Ezzel az üzenettel kell jelezni a section-nek, hogy a vonat fizikailag elhagyta a section-t
		unoccupy : IN unoccupy
		// Reset a felhasználótól, Stop állapotban lévő szakaszon lévő vonatot lehet vele újraindítani
		reset : IN reset
		// A reserveFromLeft és reserveFromRight párja, ezek az események hívják meg a megfelelő in eseményt
		reserveLeft : OUT reserveLeft
		reserveRight : OUT reserveRight
		// A reserveResult párja, a section ebben az eseményben jelez vissza, hogy sikerült-e a lefoglalás
		reserveResultToLeft : OUT reserveResultToLeft
		reserveResultToRight : OUT reserveResultToRight
		// A release párja, a section ezzel az eseménnyel szabadítja fel az aurából a baloldali vagy jobboldali section-t.
		releaseLeft : OUT releaseLeft
		releaseRight : OUT releaseRight
		// Ezzel jelez a section, hogy a rajta lévő vonatnak meg kell állnia
		stop : OUT stop  
	}
}

turnout turnoutComponent {
	interface {
		// Ezzel lehet a váltót a másik állapotába vinni
		switch : IN switch
		// Az alábbi események megfelelnek a section-ök eseményeinek. Az a különbség, hogy a turnout 3 irányba képes kommunikálni, míg a section csak 2-be.
		reserveFromLeft : IN reserveFromLeft
		reserveFromRight : IN reserveFromRight
		reserveFromBottom : IN reserveFromBottom

		reserveResultFromLeft : IN reserveResultFromLeft
		reserveResultFromRight : IN reserveResultFromRight
		reserveResultFromBottom : IN reserveResultFromBottom

		releaseFromLeft : IN releaseFromLeft
		releaseFromRight : IN releaseFromRight
		releaseFromBottom : IN releaseFromBottom

		reserveLeft : OUT reserveLeft
		reserveRight : OUT reserveRight
		reserveBottom : OUT reserveBottom

		reserveResultToLeft : OUT reserveResultToLeft
		reserveResultToRight : OUT reserveResultToRight
		reserveResultToBottom : OUT reserveResultToBottom

		releaseLeft : OUT releaseLeft
		releaseRight : OUT releaseRight
		releaseBottom : OUT releaseBottom
		
	}
}

turnoutComponent T5
sectionComponent S10
sectionComponent S11
sectionComponent S8
sectionComponent S13

channels {
	// T5.right = S8 (to be consistent it would be left, but turnout connects bottom-right when it is divergent)
	// T5.left = S11 (to be consistent it would be right, but turnout connects bottom-right when it is divergent)
	// T5.bottom = S10
	
	[S11.releaseLeft] -> [T5.releaseFromLeft]
	[S11.reserveLeft] -> [T5.reserveFromLeft]
	[S11.reserveResultToLeft] -> [T5.reserveResultFromLeft]
	[T5.releaseLeft] -> [S11.release]
	[T5.reserveLeft] -> [S11.reserveFromLeft]
	[T5.reserveResultToLeft] -> [S11.reserveResult]
	
	[S10.releaseLeft] -> [T5.releaseFromBottom]
	[S10.reserveLeft] -> [T5.reserveFromBottom]
	[S10.reserveResultToLeft] -> [T5.reserveResultFromBottom]
	[T5.releaseBottom] -> [S10.release]
	[T5.reserveBottom] -> [S10.reserveFromLeft]
	[T5.reserveResultToBottom] -> [S10.reserveResult]
	
	[S8.releaseRight] -> [T5.releaseFromRight]
	[S8.reserveRight] -> [T5.reserveFromRight]
	[S8.reserveResultToRight] -> [T5.reserveResultFromRight]
	[T5.releaseRight] -> [S8.release]
	[T5.reserveRight] -> [S8.reserveFromRight]
	[T5.reserveResultToRight] -> [S8.reserveResult]
	
	[S8.releaseLeft] -> [S13.release]
	[S8.reserveLeft] -> [S13.reserveFromRight]	
	[S8.reserveResultToLeft] -> [S13.reserveResult]
	[S13.releaseRight] -> [S8.release]
	[S13.reserveRight] -> [S8.reserveFromLeft]	
	[S13.reserveResultToRight] -> [S8.reserveResult]
}